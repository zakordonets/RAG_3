"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RAGAS —Å YandexGPT
–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é RAGAS –æ—Ü–µ–Ω–∫—É, –∞ –Ω–µ —ç–≤—Ä–∏—Å—Ç–∏–∫—É
"""
import asyncio
import os
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º RAGAS —Å sample_rate=1.0
os.environ["RAGAS_EVALUATION_SAMPLE_RATE"] = "1.0"
os.environ["RAGAS_LLM_BACKEND"] = "yandexgpt"
os.environ["ENABLE_RAGAS_EVALUATION"] = "true"

from loguru import logger
from app.services.quality.ragas_evaluator import ragas_evaluator

async def test_ragas_full():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç RAGAS —Å YandexGPT"""
    logger.info("=" * 70)
    logger.info("üöÄ –ü–û–õ–ù–´–ô –¢–ï–°–¢ RAGAS –° YANDEXGPT")
    logger.info("=" * 70)
    logger.info("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RAGAS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    logger.info(f"RAGAS enabled: {ragas_evaluator.ragas_enabled}")
    logger.info(f"Backend: {ragas_evaluator.backend_name}")
    logger.info("")
    
    if not ragas_evaluator.ragas_enabled:
        logger.error("‚ùå RAGAS –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_API_KEY")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    query = "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ edna Chat Center?"
    response = """
    –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ edna Chat Center –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
    
    1. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Webhooks
    2. –£–∫–∞–∑–∞—Ç—å URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
    3. –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π: incoming_message, message_status
    4. –î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    API –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: POST /api/v1/webhooks/configure
    
    –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
    {
      "url": "https://your-server.com/webhook",
      "events": ["incoming_message", "message_status"],
      "secret": "your_secret_key"
    }
    
    –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL
    –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.
    """
    
    contexts = [
        "Webhook –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ Chat Center –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Webhooks –∏ —É–∫–∞–∂–∏—Ç–µ URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
        "API –º–µ—Ç–æ–¥ POST /api/v1/webhooks/configure –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: url (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π), events (–º–∞—Å—Å–∏–≤), secret (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏).",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π webhook: incoming_message, message_status, thread_created, thread_closed, operator_assigned.",
        "Webhook –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã —Å JSON-payload, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏. –ü–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é HMAC-SHA256."
    ]
    
    sources = [
        "https://docs-chatcenter.edna.ru/docs/api/webhooks/configure",
        "https://docs-chatcenter.edna.ru/docs/advanced-settings/webhooks"
    ]
    
    logger.info("üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    logger.info(f"   Query: {query}")
    logger.info(f"   Response length: {len(response)} chars")
    logger.info(f"   Contexts: {len(contexts)}")
    logger.info(f"   Sources: {len(sources)}")
    logger.info("")
    
    logger.info("‚è≥ –ó–∞–ø—É—Å–∫ RAGAS –æ—Ü–µ–Ω–∫–∏...")
    logger.info("   –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã (YandexGPT –¥–µ–ª–∞–µ—Ç 6-9 LLM –≤—ã–∑–æ–≤–æ–≤)")
    logger.info("   –í—ã —É–≤–∏–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä RAGAS evaluation")
    logger.info("")
    
    import time
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º RAGAS –æ—Ü–µ–Ω–∫—É
        scores = await ragas_evaluator.evaluate_interaction(
            query=query,
            response=response,
            contexts=contexts,
            sources=sources
        )
        
        elapsed = time.time() - start_time
        
        logger.info("")
        logger.info("=" * 70)
        logger.info("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ RAGAS –û–¶–ï–ù–ö–ò")
        logger.info("=" * 70)
        logger.info("")
        logger.info(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥ ({elapsed/60:.1f} –º–∏–Ω—É—Ç)")
        logger.info("")
        logger.info(f"   üìä Faithfulness:        {scores.get('faithfulness', 0.0):.3f}")
        logger.info(f"      ‚Ü≥ –ù–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É")
        logger.info("")
        logger.info(f"   üìä Context Precision:   {scores.get('context_precision', 0.0):.3f}")
        logger.info(f"      ‚Ü≥ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        logger.info("")
        logger.info(f"   üìä Answer Relevancy:    {scores.get('answer_relevancy', 0.0):.3f}")
        logger.info(f"      ‚Ü≥ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞–ø—Ä–æ—Å—É")
        logger.info("")
        logger.info(f"   üéØ Overall Score:       {scores.get('overall_score', 0.0):.3f}")
        logger.info("")
        logger.info("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è RAGAS –æ—Ü–µ–Ω–∫–∞ –∏–ª–∏ —ç–≤—Ä–∏—Å—Ç–∏–∫–∞?
        if elapsed < 10:
            logger.warning("")
            logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (<10 —Å–µ–∫)")
            logger.warning("   –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤–º–µ—Å—Ç–æ RAGAS")
            logger.warning("")
        else:
            logger.success("")
            logger.success(f"‚úì RAGAS –æ—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å {ragas_evaluator.backend_name}!")
            logger.success("")
        
        return scores
        
    except Exception as e:
        elapsed = time.time() - start_time
        logger.error("")
        logger.error("=" * 70)
        logger.error("‚ùå –û–®–ò–ë–ö–ê RAGAS –û–¶–ï–ù–ö–ò")
        logger.error("=" * 70)
        logger.error(f"   –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
        logger.error(f"   –û—à–∏–±–∫–∞: {e}")
        logger.error("")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    logger.info("")
    logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   RAGAS_EVALUATION_SAMPLE_RATE: {os.getenv('RAGAS_EVALUATION_SAMPLE_RATE')}")
    logger.info(f"   RAGAS_LLM_BACKEND: {os.getenv('RAGAS_LLM_BACKEND')}")
    logger.info(f"   ENABLE_RAGAS_EVALUATION: {os.getenv('ENABLE_RAGAS_EVALUATION')}")
    logger.info("")
    
    asyncio.run(test_ragas_full())


