"""
Telegram polling –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã.
"""

from __future__ import annotations

import sys
import os
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

import time
import requests
import json
import asyncio
from loguru import logger
from app.config import CONFIG
from app.utils import write_debug_event
from app.services.quality.quality_manager import quality_manager
# from .bot import TelegramBot  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ


BOT_TOKEN = CONFIG.telegram_bot_token
POLL_INTERVAL = CONFIG.telegram_poll_interval
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"


def create_feedback_keyboard(interaction_id: str) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ feedback"""
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üëç",
                    "callback_data": f"feedback_positive_{interaction_id}"
                },
                {
                    "text": "üëé",
                    "callback_data": f"feedback_negative_{interaction_id}"
                }
            ]
        ]
    }
    return keyboard


def handle_callback_query(callback_query: dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç feedback –∫–Ω–æ–ø–æ–∫"""
    try:
        callback_data = callback_query.get("data", "")
        chat_id = callback_query["message"]["chat"]["id"]
        message_id = callback_query["message"]["message_id"]

        if callback_data.startswith("feedback_"):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º feedback –≤ RAG API
            feedback_type = "positive" if "positive" in callback_data else "negative"
            interaction_id = callback_data.split("_")[-1]

            try:
                response = requests.post(
                    f"{CONFIG.api_base_url}/v1/quality/feedback",
                    json={
                        "interaction_id": interaction_id,
                        "feedback": feedback_type,
                        "chat_id": chat_id
                    },
                    timeout=30
                )

                if response.status_code == 200:
                    logger.info(f"Feedback recorded: {feedback_type} for interaction {interaction_id}")
                else:
                    logger.error(f"Failed to record feedback: {response.status_code}")

            except Exception as e:
                logger.error(f"Error recording feedback: {e}")

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            try:
                requests.post(
                    f"{API_URL}/answerCallbackQuery",
                    json={
                        "callback_query_id": callback_query["id"],
                        "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"
                    },
                    timeout=10
                )
            except Exception as e:
                logger.error(f"Error answering callback query: {e}")

    except Exception as e:
        logger.error(f"Error handling callback query: {e}")


def handle_message(message: dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        chat_id = message["chat"]["id"]
        text = message.get("text", "").strip()

        if not text:
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        write_debug_event("telegram_message_received", {
            "chat_id": chat_id,
            "text_length": len(text),
            "timestamp": time.time()
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ RAG API
        try:
            response = requests.post(
                f"{CONFIG.api_base_url}/v1/chat/query",
                json={
                    "message": text,
                    "channel": "telegram",
                    "chat_id": chat_id
                },
                timeout=120
            )

            if response.status_code == 200:
                answer_data = response.json()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                send_telegram_message(chat_id, answer_data)

                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                write_debug_event("telegram_message_sent", {
                    "chat_id": chat_id,
                    "answer_length": len(answer_data.get("answer", "")),
                    "sources_count": len(answer_data.get("sources", [])),
                    "timestamp": time.time()
                })

            else:
                logger.error(f"RAG API error: {response.status_code} - {response.text}")
                send_telegram_message(chat_id, {
                    "answer": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    "sources": []
                })

        except Exception as e:
            logger.error(f"Error calling RAG API: {e}")
            send_telegram_message(chat_id, {
                "answer": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "sources": []
            })

    except Exception as e:
        logger.error(f"Error handling message: {e}")


def send_telegram_message(chat_id, answer_data: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    try:
        answer = answer_data.get("answer", "")
        sources = answer_data.get("sources", [])
        interaction_id = answer_data.get("interaction_id", "")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        message_text = answer

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if sources:
            message_text += "\n\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
            for i, source in enumerate(sources[:3], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                url = source.get("url", "")
                title = source.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                message_text += f"{i}. [{title}]({url})\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å feedback –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = None
        if interaction_id:
            keyboard = create_feedback_keyboard(interaction_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        payload = {
            "chat_id": chat_id,
            "text": message_text,
            "parse_mode": "MarkdownV2"
        }

        if keyboard:
            payload["reply_markup"] = json.dumps(keyboard)

        response = requests.post(
            f"{API_URL}/sendMessage",
            json=payload,
            timeout=30
        )

        if response.status_code == 200:
            logger.debug(f"Message sent to chat {chat_id}")
        else:
            logger.error(f"Failed to send message to chat {chat_id}: {response.status_code} - {response.text}")

    except Exception as e:
        logger.error(f"Error sending Telegram message: {e}")


def get_updates(offset: int = None) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API"""
    try:
        params = {
            "timeout": 30,
            "offset": offset
        }

        response = requests.get(
            f"{API_URL}/getUpdates",
            params=params,
            timeout=40
        )

        if response.status_code == 200:
            data = response.json()
            if data.get("ok"):
                return data.get("result", [])
            else:
                logger.error(f"Telegram API error: {data}")
                return []
        else:
            logger.error(f"Failed to get updates: {response.status_code}")
            return []

    except Exception as e:
        logger.error(f"Error getting updates: {e}")
        return []


def run_polling_loop() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π polling —Ü–∏–∫–ª"""
    logger.info("Starting Telegram polling loop...")
    logger.info(f"Bot token: {BOT_TOKEN[:10]}...")
    logger.info(f"API base: {CONFIG.api_base_url}")
    logger.info(f"Poll interval: {POLL_INTERVAL}s")

    offset = None

    while True:
        try:
            updates = get_updates(offset)

            for update in updates:
                offset = update["update_id"] + 1

                if "message" in update:
                    handle_message(update["message"])
                elif "callback_query" in update:
                    handle_callback_query(update["callback_query"])

            time.sleep(POLL_INTERVAL)

        except KeyboardInterrupt:
            logger.info("Telegram polling stopped by user")
            break
        except Exception as e:
            logger.error(f"Error in polling loop: {e}")
            time.sleep(POLL_INTERVAL)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        run_polling_loop()
    except Exception as e:
        logger.error(f"Fatal error in Telegram polling: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
