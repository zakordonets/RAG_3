from __future__ import annotations

import sys
import os
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

import time
import requests
import json
import asyncio
from loguru import logger
from app.config import CONFIG
from app.log_utils import write_debug_event
from app.services.quality.quality_manager import quality_manager


BOT_TOKEN = CONFIG.telegram_bot_token
POLL_INTERVAL = CONFIG.telegram_poll_interval
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"


def create_feedback_keyboard(interaction_id: str) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ feedback"""
    keyboard = {
        "inline_keyboard": [
            [
                {
                    "text": "üëç",
                    "callback_data": f"feedback_positive_{interaction_id}"
                },
                {
                    "text": "üëé",
                    "callback_data": f"feedback_negative_{interaction_id}"
                }
            ]
        ]
    }
    return keyboard


def handle_callback_query(callback_query: dict) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç feedback –∫–Ω–æ–ø–æ–∫"""
    try:
        callback_data = callback_query.get("data", "")
        chat_id = callback_query["message"]["chat"]["id"]
        message_id = callback_query["message"]["message_id"]

        if callback_data.startswith("feedback_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø feedback –∏ interaction_id
            # –§–æ—Ä–º–∞—Ç: feedback_<positive|negative>_<interaction_id>
            parts = callback_data.split("_", 2)
            if len(parts) == 3:
                feedback_type = parts[1]  # positive –∏–ª–∏ negative
                interaction_id = parts[2]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º feedback —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤ sync-–∫–æ–¥–µ
                asyncio.run(save_user_feedback(interaction_id, feedback_type))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if feedback_type == "positive":
                    response_text = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!"
                else:
                    response_text = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ."

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query
                requests.post(f"{API_URL}/answerCallbackQuery",
                            json={
                                "callback_query_id": callback_query["id"],
                                "text": response_text,
                                "show_alert": False
                            },
                            timeout=10)

                # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                requests.post(f"{API_URL}/editMessageReplyMarkup",
                            json={
                                "chat_id": chat_id,
                                "message_id": message_id,
                                "reply_markup": {"inline_keyboard": []}
                            },
                            timeout=10)

                logger.info(f"Processed feedback: {feedback_type} for interaction {interaction_id}")
    except Exception as e:
        logger.error(f"Error handling callback query: {type(e).__name__}: {e}. data={callback_query}")


async def save_user_feedback(interaction_id: str, feedback_type: str) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π feedback"""
    try:
        await quality_manager.add_user_feedback(
            interaction_id=interaction_id,
            feedback_type=feedback_type,
            feedback_text=f"User {feedback_type} feedback via Telegram"
        )
        logger.info(f"Saved user feedback: {feedback_type} for {interaction_id}")
    except Exception as e:
        logger.error(f"Failed to save user feedback: {e}")


def run_polling_loop(api_base: str = "http://localhost:9000") -> None:
    if not BOT_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    logger.info(f"Bot token: {BOT_TOKEN[:10]}...")
    logger.info(f"API base: {api_base}")
    logger.info(f"Polling interval: {POLL_INTERVAL}s")

    offset = None
    while True:
        try:
            resp = requests.get(f"{API_URL}/getUpdates", params={"timeout": 25, "offset": offset}, timeout=30)
            resp.raise_for_status()
            updates = resp.json().get("result", [])
            for upd in updates:
                offset = upd["update_id"] + 1

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (feedback –∫–Ω–æ–ø–∫–∏)
                if "callback_query" in upd:
                    handle_callback_query(upd["callback_query"])
                    continue

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                message = upd.get("message") or {}
                chat = message.get("chat") or {}
                chat_id = chat.get("id")
                text = message.get("text") or ""
                if not text or chat_id is None:
                    continue
                # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ Core API
                logger.info(f"Processing message from chat {chat_id}: {text[:50]}...")
                try:
                    logger.info(f"Making request to {api_base}/v1/chat/query")
                    r = requests.post(
                        f"{api_base}/v1/chat/query",
                        json={"channel": "telegram", "chat_id": str(chat_id), "message": text},
                        timeout=120,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 2 –º–∏–Ω—É—Ç
                    )
                    logger.info(f"Core API response status: {r.status_code}")
                    r.raise_for_status()

                    response_data = r.json()
                    logger.info(f"Core API response keys: {list(response_data.keys())}")

                    ans = response_data.get("answer")
                    interaction_id = response_data.get("interaction_id")  # –ü–æ–ª—É—á–∞–µ–º interaction_id –æ—Ç API

                    if ans:
                        logger.info(f"Answer length: {len(ans)} chars")
                        logger.info(f"Answer preview: {ans[:100]}...")
                        logger.info(f"Interaction ID: {interaction_id}")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π MarkdownV2 (telegramify_markdown —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
                        logger.info(f"Sending reply to chat {chat_id}")
                        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        write_debug_event("telegram.send_attempt", {"chat_id": str(chat_id), "len": len(ans), "preview": ans[:500], "interaction_id": interaction_id})

                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        message_data = {
                            "chat_id": chat_id,
                            "text": ans,
                            "parse_mode": "MarkdownV2",
                            "disable_web_page_preview": True
                        }

                        # –î–æ–±–∞–≤–ª—è–µ–º feedback –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å interaction_id
                        if interaction_id:
                            message_data["reply_markup"] = create_feedback_keyboard(interaction_id)
                            logger.info(f"Added feedback buttons for interaction {interaction_id}")

                        send_response = requests.post(f"{API_URL}/sendMessage",
                                    json=message_data,
                                    timeout=15)
                        logger.info(f"Telegram send response: {send_response.status_code}")
                        if send_response.status_code != 200:
                            logger.error(f"Telegram MarkdownV2 error: {send_response.text}")
                            write_debug_event("telegram.send_error", {"status": send_response.status_code, "body": send_response.text})
                            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            logger.info(f"Trying fallback without formatting...")
                            fallback_data = {
                                "chat_id": chat_id,
                                "text": ans
                            }
                            # –î–æ–±–∞–≤–ª—è–µ–º feedback –∫–Ω–æ–ø–∫–∏ –≤ fallback —Ç–æ–∂–µ
                            if interaction_id:
                                fallback_data["reply_markup"] = create_feedback_keyboard(interaction_id)

                            fallback_response = requests.post(f"{API_URL}/sendMessage",
                                        json=fallback_data,
                                        timeout=15)
                            logger.info(f"Telegram fallback response: {fallback_response.status_code}")
                            if fallback_response.status_code != 200:
                                logger.error(f"Telegram fallback error: {fallback_response.text}")
                                write_debug_event("telegram.fallback_error", {"status": fallback_response.status_code, "body": fallback_response.text})
                    else:
                        logger.warning(f"No answer received for chat {chat_id}")
                except requests.exceptions.Timeout as e:
                    logger.error(f"Timeout error for chat {chat_id}: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–∞–π–º–∞—É—Ç–µ
                    try:
                        requests.post(f"{API_URL}/sendMessage",
                                    json={"chat_id": chat_id, "text": "‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."},
                                    timeout=15)
                    except:
                        pass
                except Exception as e:
                    logger.error(f"Failed to process message for chat {chat_id}: {type(e).__name__}: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        requests.post(f"{API_URL}/sendMessage",
                                    json={"chat_id": chat_id, "text": "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."},
                                    timeout=15)
                    except:
                        pass
        except Exception as e:
            logger.error(f"Polling error: {e}")
            time.sleep(POLL_INTERVAL)
            continue


if __name__ == "__main__":
    try:
        logger.info("Starting Telegram bot polling...")
        run_polling_loop()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        import traceback
        traceback.print_exc()
