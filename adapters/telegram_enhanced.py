"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –∞–¥–∞–ø—Ç–µ—Ä —Å rate limiting –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
"""
from __future__ import annotations

import time
import requests
from typing import Dict, Any, Optional
from loguru import logger
import telegramify_markdown

from app.config import CONFIG
from adapters.rate_limiter import rate_limiter
from app.metrics import metrics_collector


class TelegramBot:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å rate limiting –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """

    def __init__(
        self,
        bot_token: str,
        api_base: str = "http://localhost:9000",
        poll_interval: float = 1.0,
        timeout: int = 120
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞.

        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
            api_base: –ë–∞–∑–æ–≤—ã–π URL API
            poll_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.bot_token = bot_token
        self.api_base = api_base
        self.poll_interval = poll_interval
        self.timeout = timeout

        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.offset = None

        logger.info(f"Telegram bot initialized: {bot_token[:10]}...")
        logger.info(f"API base: {api_base}")
        logger.info(f"Poll interval: {poll_interval}s")
        logger.info(f"Timeout: {timeout}s")

    def _send_message(
        self,
        chat_id: str,
        text: str,
        parse_mode: str = "MarkdownV2",
        reply_to_message_id: Optional[int] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.

        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            reply_to_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            payload = {
                "chat_id": chat_id,
                "text": text,
            }
            # –ü–µ—Ä–µ–¥–∞—ë–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω (Telegram –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç null)
            if parse_mode:
                payload["parse_mode"] = parse_mode

            if reply_to_message_id:
                payload["reply_to_message_id"] = reply_to_message_id

            response = requests.post(
                f"{self.api_url}/sendMessage",
                json=payload,
                timeout=15
            )

            if response.status_code == 200:
                logger.debug(f"Message sent to chat {chat_id}")
                return True
            else:
                logger.error(f"Failed to send message: {response.status_code} - {response.text}")
                return False

        except Exception as e:
            logger.error(f"Error sending message to chat {chat_id}: {e}")
            return False

    def _send_message_with_fallback(
        self,
        chat_id: str,
        text: str,
        reply_to_message_id: Optional[int] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.

        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            reply_to_message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å MarkdownV2
        if self._send_message(chat_id, text, "MarkdownV2", reply_to_message_id):
            return True

        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.warning(f"MarkdownV2 failed for chat {chat_id}, trying plain text")
        return self._send_message(chat_id, text, None, reply_to_message_id)

    def _format_response(self, response: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è Telegram.

        Args:
            response: –û—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        answer = response.get("answer", "")
        sources = response.get("sources", [])

        if not answer:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é telegramify-markdown
        try:
            formatted_answer = telegramify_markdown.markdownify(answer)
        except Exception as e:
            logger.warning(f"Markdown formatting failed: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            formatted_answer = self._simple_format(answer)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if sources:
            sources_text = self._format_sources(sources)
            formatted_answer += f"\n\n{sources_text}"

        return formatted_answer

    def _simple_format(self, text: str) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ MarkdownV2.

        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ó–∞–º–µ–Ω—è–µ–º markdown –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        text = text.replace("**", "*")  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        text = text.replace("### ", "üîπ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace("## ", "üî∏ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace("# ", "üî∏ ")  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        text = text.replace("`", "")  # –£–±–∏—Ä–∞–µ–º –∫–æ–¥
        return text

    def _format_sources(self, sources: list[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è Telegram.

        Args:
            sources: –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        if not sources:
            return ""

        sources_text = "üìö *–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n"
        for i, source in enumerate(sources[:3], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
            title = source.get("title", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            url = source.get("url", "")

            if url:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
                title_escaped = title.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]")
                sources_text += f"{i}\\. [{title_escaped}]({url})\n"

        return sources_text

    def _process_message(self, message: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
        """
        chat = message.get("chat", {})
        chat_id = str(chat.get("id", ""))
        text = message.get("text", "").strip()
        message_id = message.get("message_id")

        if not text or not chat_id:
            logger.warning("Empty message or chat_id")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not rate_limiter.is_allowed(chat_id):
            logger.warning(f"Rate limit exceeded for user {chat_id}")
            self._send_message_with_fallback(
                chat_id,
                "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                message_id
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._send_message_with_fallback(
            chat_id,
            "ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            message_id
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É
        try:
            logger.info(f"Processing message from chat {chat_id}: {text[:50]}...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Core API
            response = requests.post(
                f"{self.api_base}/v1/chat/query",
                json={
                    "channel": "telegram",
                    "chat_id": chat_id,
                    "message": text
                },
                timeout=self.timeout
            )

            if response.status_code == 200:
                data = response.json()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
                if "error" in data:
                    error_message = data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
                    self._send_message_with_fallback(
                        chat_id,
                        f"‚ùå {error_message}",
                        message_id
                    )
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                formatted_response = self._format_response(data)
                self._send_message_with_fallback(
                    chat_id,
                    formatted_response,
                    message_id
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics_collector.record_query("telegram", "success")

            else:
                logger.error(f"Core API error: {response.status_code} - {response.text}")
                self._send_message_with_fallback(
                    chat_id,
                    "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    message_id
                )
                metrics_collector.record_query("telegram", "error", "api_error")

        except requests.exceptions.Timeout:
            logger.error(f"Timeout processing message for chat {chat_id}")
            self._send_message_with_fallback(
                chat_id,
                "‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                message_id
            )
            metrics_collector.record_query("telegram", "error", "timeout")

        except Exception as e:
            logger.error(f"Error processing message for chat {chat_id}: {e}")
            self._send_message_with_fallback(
                chat_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                message_id
            )
            metrics_collector.record_query("telegram", "error", "processing_error")

    def _get_updates(self) -> list[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API.

        Returns:
            –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        try:
            params = {
                "timeout": 25,
                "offset": self.offset
            }

            response = requests.get(
                f"{self.api_url}/getUpdates",
                params=params,
                timeout=30
            )

            if response.status_code == 200:
                data = response.json()
                return data.get("result", [])
            else:
                logger.error(f"Failed to get updates: {response.status_code} - {response.text}")
                return []

        except Exception as e:
            logger.error(f"Error getting updates: {e}")
            return []

    def run_polling(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç long polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        logger.info("Starting Telegram bot polling...")

        while True:
            try:
                updates = self._get_updates()

                for update in updates:
                    self.offset = update["update_id"] + 1
                    message = update.get("message")

                    if message:
                        self._process_message(message)

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø—Ä–æ—Å–∞–º–∏
                time.sleep(self.poll_interval)

            except KeyboardInterrupt:
                logger.info("Bot stopped by user")
                break
            except Exception as e:
                logger.error(f"Polling error: {e}")
                time.sleep(self.poll_interval)


def run_enhanced_polling_loop(api_base: str = "http://localhost:9000") -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π polling loop.

    Args:
        api_base: –ë–∞–∑–æ–≤—ã–π URL API
    """
    if not CONFIG.telegram_bot_token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

    bot = TelegramBot(
        bot_token=CONFIG.telegram_bot_token,
        api_base=api_base,
        poll_interval=CONFIG.telegram_poll_interval,
        timeout=120
    )

    try:
        bot.run_polling()
    except Exception as e:
        logger.error(f"Failed to start enhanced bot: {e}")
        raise


if __name__ == "__main__":
    try:
        logger.info("Starting enhanced Telegram bot...")
        run_enhanced_polling_loop()
    except Exception as e:
        logger.error(f"Failed to start enhanced bot: {e}")
        import traceback
        traceback.print_exc()
