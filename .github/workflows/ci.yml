name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit:
    name: Unit & Quality (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -r requirements-dev.txt
        python -m pip install pre-commit

    - name: Run pre-commit
      if: matrix.python-version == '3.11'
      run: pre-commit run --all-files --show-diff-on-failure

    - name: Lint with flake8
      if: matrix.python-version == '3.11'
      run: |
        python -m flake8 app/ tests/ scripts/ --max-line-length=120 --ignore=E203,W503 --count --show-source --statistics

    - name: Type check with mypy
      if: matrix.python-version == '3.11'
      run: |
        python -m mypy app/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        python -m pytest tests/ -m "not slow and not integration" --tb=short -n auto --html=report.html --self-contained-html --json-report --json-report-file=report.json --cov=app --cov=ingestion --cov=adapters --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload unit test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: unit-${{ matrix.python-version }}-reports
        path: |
          report.html
          report.json
          htmlcov
          coverage.xml
        if-no-files-found: ignore

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -r requirements-dev.txt

    - name: Run integration tests
      run: |
        python -m pytest tests/ -m "integration" --tb=short --html=report.html --self-contained-html --json-report --json-report-file=report.json

    - name: Upload integration test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-reports
        path: |
          report.html
          report.json
        if-no-files-found: ignore

  slow:
    name: Slow Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install -r requirements-dev.txt

    - name: Run slow tests
      run: |
        python -m pytest tests/ -m "slow" --tb=short --html=report.html --self-contained-html --json-report --json-report-file=report.json

    - name: Upload slow test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: slow-reports
        path: |
          report.html
          report.json
        if-no-files-found: ignore

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install safety bandit

    - name: Security check with safety
      run: |
        safety check -r requirements.txt

    - name: Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

  build:
    runs-on: ubuntu-latest
    needs: [integration, slow, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build

    - name: Build package
      run: |
        python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
