#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ batch_size –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
"""
import sys
import os
import gc
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def optimize_environment():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    logger.info("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏...")

    # –£–º–µ–Ω—å—à–∞–µ–º batch_size –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    os.environ["EMBEDDING_BATCH_SIZE"] = "8"  # –ë—ã–ª–æ 16, —Å—Ç–∞–ª–æ 8
    os.environ["SPARSE_BATCH_SIZE"] = "16"    # –ë—ã–ª–æ 32, —Å—Ç–∞–ª–æ 16
    os.environ["DENSE_BATCH_SIZE"] = "8"      # –ë—ã–ª–æ 16, —Å—Ç–∞–ª–æ 8

    # –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    os.environ["EMBEDDING_MAX_LENGTH_DOC"] = "1024"  # –ë—ã–ª–æ 2048

    # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏
    os.environ["ADAPTIVE_BATCHING"] = "false"

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º hybrid backend –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    os.environ["EMBEDDINGS_BACKEND"] = "hybrid"

    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:")
    logger.info(f"   EMBEDDING_BATCH_SIZE: {os.environ['EMBEDDING_BATCH_SIZE']}")
    logger.info(f"   SPARSE_BATCH_SIZE: {os.environ['SPARSE_BATCH_SIZE']}")
    logger.info(f"   DENSE_BATCH_SIZE: {os.environ['DENSE_BATCH_SIZE']}")
    logger.info(f"   EMBEDDING_MAX_LENGTH_DOC: {os.environ['EMBEDDING_MAX_LENGTH_DOC']}")

def run_optimized_indexing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")

    try:
        from scripts.indexer import Indexer

        indexer = Indexer()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = indexer.reindex(
            mode='full',
            strategy='jina',
            use_cache=True,
            max_pages=None,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            sparse=True,
            backend='hybrid'  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ hybrid
        )

        if result['success']:
            logger.success("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 'N/A')}")
            logger.info(f"   –ß–∞–Ω–∫–æ–≤: {result.get('chunks', 'N/A')}")
            logger.info(f"   –í—Ä–µ–º—è: {result.get('duration', 'N/A')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def cleanup_memory():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
    gc.collect()
    logger.info("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø")

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    optimize_environment()

    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    cleanup_memory()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    success = run_optimized_indexing()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleanup_memory()

    if success:
        logger.success("üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("üí• –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        return 1

if __name__ == "__main__":
    sys.exit(main())
