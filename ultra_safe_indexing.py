#!/usr/bin/env python3
"""
–£–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
"""
import sys
import os
import gc
import psutil
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def setup_encoding():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É"""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8...")
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['PYTHONUTF8'] = '1'

    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    if hasattr(sys.stderr, 'reconfigure'):
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')

    logger.success("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: UTF-8")

def monitor_memory():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    memory = psutil.virtual_memory()
    logger.info(f"üíæ –ü–∞–º—è—Ç—å: {memory.percent:.1f}% ({memory.used / 1024**3:.1f} GB / {memory.total / 1024**3:.1f} GB)")

    if memory.percent > 85:
        logger.warning("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
        gc.collect()
        return False
    return True

def ultra_conservative_settings():
    """–£–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏"""
    logger.info("üîß –£–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ batch_size
    os.environ["EMBEDDING_BATCH_SIZE"] = "1"      # –û–¥–∏–Ω —Ç–µ–∫—Å—Ç –∑–∞ —Ä–∞–∑!
    os.environ["SPARSE_BATCH_SIZE"] = "1"         # –ú–∏–Ω–∏–º—É–º
    os.environ["DENSE_BATCH_SIZE"] = "1"          # –ú–∏–Ω–∏–º—É–º

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    os.environ["EMBEDDING_MAX_LENGTH_DOC"] = "256"  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ

    # –¢–æ–ª—å–∫–æ CPU, –Ω–∏–∫–∞–∫–æ–≥–æ GPU
    os.environ["EMBEDDINGS_BACKEND"] = "onnx"
    os.environ["EMBEDDING_DEVICE"] = "cpu"

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    os.environ["ADAPTIVE_BATCHING"] = "false"
    os.environ["EMBEDDING_USE_FP16"] = "false"
    os.environ["USE_SPARSE"] = "false"  # –û—Ç–∫–ª—é—á–∞–µ–º sparse –≤–µ–∫—Ç–æ—Ä—ã

    logger.info("‚úÖ –£–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

def run_ultra_safe_indexing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—å—Ç—Ä–∞-–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")

    try:
        from scripts.indexer import Indexer

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        if not monitor_memory():
            logger.error("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            return False

        indexer = Indexer()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å —É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = indexer.reindex(
            mode='full',
            strategy='jina',
            use_cache=True,
            max_pages=50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∞
            sparse=False,  # –û—Ç–∫–ª—é—á–∞–µ–º sparse –≤–µ–∫—Ç–æ—Ä—ã
            backend='onnx'  # –¢–æ–ª—å–∫–æ CPU
        )

        if result['success']:
            logger.success("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 'N/A')}")
            logger.info(f"   –ß–∞–Ω–∫–æ–≤: {result.get('chunks', 'N/A')}")
            logger.info(f"   –í—Ä–µ–º—è: {result.get('duration', 'N/A')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def cleanup_memory():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
    logger.info("üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    for _ in range(3):
        gc.collect()

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    monitor_memory()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –£–õ–¨–¢–†–ê-–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    setup_encoding()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—å—Ç—Ä–∞-–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ultra_conservative_settings()

    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    cleanup_memory()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    success = run_ultra_safe_indexing()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleanup_memory()

    if success:
        logger.success("üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("üí• –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        return 1

if __name__ == "__main__":
    sys.exit(main())
