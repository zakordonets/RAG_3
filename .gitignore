.env
__pycache__/
.pytest_cache/
.venv/
*.pyc
*.pyo
*.pyd
build/
dist/
*.egg-info/
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor.`.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# ===== PROJECT SPECIFIC =====

# Environment files (sensitive data)
.env
.env.local
.env.production
.env.development

# Logs and diagnostics
logs/
*.log
app.log
debug.log

# Cache files
.cache/
__pycache__/
*.pyc
*.pyo
*.pyd

# ML Models and ONNX files (large binary files)
models/
*.onnx
*.onnx_data
*.bin
*.model
*.pkl
*.safetensors

# Kubernetes secrets (sensitive data)
k8s/*secret*.yaml
k8s/registry-secret.yaml
k8s/secret.yaml
k8s/tls-secret.yaml

# Database files
*.db
*.sqlite
*.sqlite3

# Temporary files
tmp/
temp/
*.tmp
*.temp
*.swp
*.swo

# IDE files
.vscode/settings.json
.idea/
*.iml

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.backup
*~

# Large data files
*.csv
*.json.gz
*.parquet
data/
datasets/

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# Browser cache and cookies
.cache/
cookies.json

# ===== PHASE 2: RAGAS QUALITY SYSTEM =====

# Quality Database files
data/quality_interactions.db
data/quality_interactions_test.db
data/quality_interactions_*.db
*.db-journal

# RAGAS evaluation cache and temporary files
.ragas_cache/
ragas_evaluation_cache/
*.ragas_cache

# Quality metrics and monitoring data
metrics/
monitoring/data/
prometheus_data/
grafana_data/

# Test artifacts and reports
test_reports/
quality_test_results/
ragas_evaluation_results/

# Model checkpoints and embeddings cache
embeddings_cache/
model_checkpoints/
*.embeddings

# Quality interaction exports
quality_export_*.json
quality_export_*.csv
quality_backup_*.sql

# RAGAS specific temporary files
ragas_temp/
ragas_logs/
*.ragas_log

# Quality system configuration overrides
quality_config_override.json
ragas_config_override.yaml

# Performance profiling data
*.prof
*.profile
performance_logs/

# Quality system backups
quality_backups/
ragas_backups/
