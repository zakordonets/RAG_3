from __future__ import annotations

import time
from typing import Any
from loguru import logger
from tqdm import tqdm
from ingestion.crawler import crawl, crawl_mkdocs_index, crawl_sitemap, crawl_with_sitemap_progress
from ingestion.parsers import parse_api_documentation, parse_release_notes, parse_faq_content, parse_guides
from ingestion.chunker import chunk_text, text_hash
from ingestion.indexer import upsert_chunks


def classify_page(url: str) -> str:
    low = url.lower()
    if "faq" in low:
        return "faq"
    if "api" in low:
        return "api"
    if "release" in low or "changelog" in low:
        return "release_notes"
    return "guide"


def crawl_and_index(incremental: bool = True, strategy: str = "jina", use_cache: bool = True, reindex_mode: str = "auto", max_pages: int = None) -> dict[str, Any]:
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∫—Ä–∞—É–ª–∏–Ω–≥ ‚Üí —á–∞–Ω–∫–∏–Ω–≥ ‚Üí —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ ‚Üí upsert –≤ Qdrant.

    Args:
        incremental: –µ—Å–ª–∏ True ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        strategy: —Å—Ç—Ä–∞—Ç–µ–≥–∏—è crawling (jina, http, browser)
        use_cache: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ crawling
        reindex_mode: —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:
            - "auto": —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            - "force": –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            - "cache_only": –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ —á–∞–Ω–∫–∞–º
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º {'–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é ' if incremental else ''}–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é")
    logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: strategy={strategy}, use_cache={use_cache}, reindex_mode={reindex_mode}")

    # 1) –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π crawling —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if reindex_mode == "cache_only":
        logger.info("–†–µ–∂–∏–º cache_only: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        from ingestion.crawl_cache import get_crawl_cache
        cache = get_crawl_cache()
        pages = []

        for url in cache.get_cached_urls():
            cached_page = cache.get_page(url)
            if cached_page:
                pages.append({
                    "url": url,
                    "html": cached_page.html,
                    "text": cached_page.text,
                    "title": cached_page.title,
                    "cached": True
                })

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if max_pages and len(pages) >= max_pages:
                    break

        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pages)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –∫–µ—à–∞")
    else:
        pages = crawl_with_sitemap_progress(strategy=strategy, use_cache=use_cache, max_pages=max_pages)

    # 2) –§–æ–ª–±—ç–∫–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    if not pages:
        logger.warning("Sitemap crawling –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º MkDocs index...")
        pages = crawl_mkdocs_index()
    if not pages:
        logger.warning("MkDocs index –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –æ–±—Ö–æ–¥...")
        pages = crawl(strategy="browser")
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    all_chunks = []
    logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ–±–∏—Ä–∞–µ–º —á–∞–Ω–∫–∏...")

    with tqdm(total=len(pages), desc="Processing pages") as pbar:
        for p in pages:
            url = p["url"]
            html = p.get("html") or ""
            raw_text = p.get("text")
            page_type = classify_page(url)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞)
            if raw_text:
                text = raw_text
                title = p.get("title")

                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ Jina Reader —Ç–µ–∫—Å—Ç–∞
                if not title and raw_text.startswith("Title:"):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "Title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –°–∞–π—Ç"
                    try:
                        title_line = raw_text.split('\n')[0]  # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                        if "Title:" in title_line:
                            title_part = title_line.split("Title:")[1].strip()
                            if "|" in title_part:
                                title = title_part.split("|")[0].strip()
                            else:
                                title = title_part
                    except Exception:
                        pass

            else:
                parsed = parse_guides(html)
                text = parsed.get("text") or html
                title = parsed.get("title")

            chunks_text = chunk_text(text)

            # Fallback –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
            if not title:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ URL
                url_parts = url.split('/')
                title = url_parts[-1].replace('-', ' ').replace('_', ' ').title()

            for i, ct in enumerate(chunks_text):
                all_chunks.append({
                    "text": ct,
                    "payload": {
                        "url": url,
                        "page_type": page_type,
                        "source": "docs-site",
                        "language": "ru",
                        "title": title,
                        "text": ct,
                        "indexed_via": strategy,
                        "indexed_at": time.time(),
                        "chunk_index": i,
                        "content_length": len(text),
                    },
                })
            pbar.update(1)

    logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(all_chunks)} —á–∞–Ω–∫–æ–≤, –Ω–∞—á–∏–Ω–∞–µ–º –±–∞—Ç—á–µ–≤—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...")

    # –ë–∞—Ç—á–µ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞
    from app.config import CONFIG
    batch_size = CONFIG.embedding_batch_size
    total_chunks = 0

    with tqdm(total=len(all_chunks), desc="Indexing chunks", unit="chunk") as pbar:
        for i in range(0, len(all_chunks), batch_size):
            batch = all_chunks[i:i + batch_size]
            batch_num = i // batch_size + 1
            total_batches = (len(all_chunks) + batch_size - 1) // batch_size

            logger.info(f"–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –±–∞—Ç—á {batch_num}/{total_batches}: {len(batch)} —á–∞–Ω–∫–æ–≤")
            indexed = upsert_chunks(batch)
            total_chunks += indexed
            pbar.update(len(batch))
    return {"pages": len(pages), "chunks": total_chunks}


if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å BGE-M3 unified embeddings...")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    from app.config import CONFIG
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
    logger.info(f"  EMBEDDINGS_BACKEND: {CONFIG.embeddings_backend}")
    logger.info(f"  EMBEDDING_DEVICE: {CONFIG.embedding_device}")
    logger.info(f"  USE_SPARSE: {CONFIG.use_sparse}")
    logger.info(f"  EMBEDDING_MAX_LENGTH_DOC: {CONFIG.embedding_max_length_doc}")
    logger.info(f"  EMBEDDING_BATCH_SIZE: {CONFIG.embedding_batch_size}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    from app.services.bge_embeddings import _get_optimal_backend_strategy
    optimal_backend = _get_optimal_backend_strategy()
    logger.info(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {optimal_backend}")

    try:
        stats = crawl_and_index(incremental=False)
        logger.success(f"‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.success(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['pages']} —Å—Ç—Ä–∞–Ω–∏—Ü, {stats['chunks']} —á–∞–Ω–∫–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        raise
