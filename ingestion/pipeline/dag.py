"""
–ï–¥–∏–Ω—ã–π DAG –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

from typing import List, Iterable, Any, Dict
from loguru import logger
import time

from ingestion.adapters.base import PipelineStep, RawDoc


class PipelineDAG:
    """
    –ï–¥–∏–Ω—ã–π DAG –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤:
    Parse ‚Üí Normalize ‚Üí Chunk ‚Üí Embed ‚Üí Index

    –ö–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ö–æ–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞.
    """

    def __init__(self, steps: List[PipelineStep]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DAG —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —à–∞–≥–∞–º–∏.

        Args:
            steps: –°–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        self.steps = steps
        self.stats = {
            "total_docs": 0,
            "processed_docs": 0,
            "failed_docs": 0,
            "step_times": {}
        }

    def run(self, raw_docs_iterable: Iterable[RawDoc]) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Ç–æ–∫–∞ —Å—ã—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Å–µ —à–∞–≥–∏ DAG.

        Args:
            raw_docs_iterable: –ü–æ—Ç–æ–∫ —Å—ã—Ä—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞

        Returns:
            Dict —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info(f"–ó–∞–ø—É—Å–∫ DAG —Å {len(self.steps)} —à–∞–≥–∞–º–∏")
        start_time = time.time()

        for step in self.steps:
            logger.info(f"  - {step.get_step_name()}")

        # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        logger.info("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        raw_docs = list(raw_docs_iterable)
        total_docs = len(raw_docs)
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {total_docs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = {
            "total_docs": total_docs,
            "processed_docs": 0,
            "failed_docs": 0,
            "step_times": {step.get_step_name(): 0.0 for step in self.steps}
        }

        try:
            for idx, raw_doc in enumerate(raw_docs, 1):
                try:
                    # –ü—Ä–æ—Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ –≤—Å–µ —à–∞–≥–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞
                    data = raw_doc

                    for step in self.steps:
                        step_start = time.time()
                        data = step.process(data)
                        step_time = time.time() - step_start

                        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
                        step_name = step.get_step_name()
                        self.stats["step_times"][step_name] += step_time

                    self.stats["processed_docs"] += 1

                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
                    if idx % 10 == 0 or idx == total_docs:
                        progress_pct = (idx / total_docs * 100) if total_docs > 0 else 0
                        logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{total_docs} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({progress_pct:.1f}%)")

                except Exception as e:
                    self.stats["failed_docs"] += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {raw_doc.uri}: {e}")
                    continue

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ DAG: {e}")
            raise

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        self.stats["total_time"] = total_time

        logger.info(f"DAG –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f}s")
        logger.info(f"  –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {self.stats['total_docs']}")
        logger.info(f"  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['processed_docs']}")
        logger.info(f"  –û—à–∏–±–æ–∫: {self.stats['failed_docs']}")

        # –í—Ä–µ–º—è –ø–æ —à–∞–≥–∞–º
        for step_name, step_time in self.stats["step_times"].items():
            percentage = (step_time / total_time) * 100 if total_time > 0 else 0
            logger.info(f"  {step_name}: {step_time:.2f}s ({percentage:.1f}%)")

        return self.stats

    def get_step_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —à–∞–≥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return [step.get_step_name() for step in self.steps]

    def add_step(self, step: PipelineStep, position: int = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —à–∞–≥ –≤ –ø–∞–π–ø–ª–∞–π–Ω.

        Args:
            step: –®–∞–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            position: –ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤ –∫–æ–Ω–µ—Ü)
        """
        if position is None:
            self.steps.append(step)
        else:
            self.steps.insert(position, step)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats["step_times"][step.get_step_name()] = 0.0
