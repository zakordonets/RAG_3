#!/usr/bin/env python3
"""
CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Docusaurus –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

from __future__ import annotations
import argparse
import sys
import yaml
from pathlib import Path
from typing import Optional, Dict, Any
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from app.config import CONFIG
from ingestion.crawlers.docusaurus_fs_crawler import crawl_docs
from ingestion.processors.docusaurus_markdown_processor import process_markdown
from ingestion.indexer import upsert_chunks, create_payload_indexes
from app.services.core.embeddings import embed_batch_optimized


def load_config(config_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    config_file = Path(config_path)
    if not config_file.exists():
        raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")

    try:
        with open(config_file, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑: {config_path}")
        return config
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def merge_config_with_args(config: Dict[str, Any], args: argparse.Namespace) -> Dict[str, Any]:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    merged = {
        "docs_root": "C:\\CC_RAG\\docs",
        "site_base_url": "https://docs-chatcenter.edna.ru",
        "site_docs_prefix": "/docs",
        "collection_name": "docs_chatcenter",
        "category_filter": None,
        "reindex_mode": "changed",
        "batch_size": 16
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
    if "sources" in config and "docusaurus" in config["sources"]:
        docusaurus_config = config["sources"]["docusaurus"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω
        if not docusaurus_config.get("enabled", True):
            logger.warning("–ò—Å—Ç–æ—á–Ω–∏–∫ docusaurus –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        merged.update({
            "docs_root": docusaurus_config.get("docs_root", merged["docs_root"]),
            "site_base_url": docusaurus_config.get("site_base_url", merged["site_base_url"]),
            "site_docs_prefix": docusaurus_config.get("site_docs_prefix", merged["site_docs_prefix"]),
        })

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞–Ω–∫–∏–Ω–≥–∞
        if "chunk" in docusaurus_config:
            chunk_config = docusaurus_config["chunk"]
            merged["chunk_max_tokens"] = chunk_config.get("max_tokens", 600)
            merged["chunk_overlap_tokens"] = chunk_config.get("overlap_tokens", 120)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        if "cleaning" in docusaurus_config:
            cleaning_config = docusaurus_config["cleaning"]
            merged["cleaning"] = {
                "remove_html_comments": cleaning_config.get("remove_html_comments", True),
                "strip_imports": cleaning_config.get("strip_imports", True),
                "strip_custom_components": cleaning_config.get("strip_custom_components", True),
                "strip_admonitions": cleaning_config.get("strip_admonitions", True),
            }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        if "routing" in docusaurus_config:
            routing_config = docusaurus_config["routing"]
            merged["routing"] = {
                "drop_numeric_prefix_in_first_level": routing_config.get("drop_numeric_prefix_in_first_level", True),
                "add_trailing_slash": routing_config.get("add_trailing_slash", False),
            }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
        if "indexing" in docusaurus_config:
            indexing_config = docusaurus_config["indexing"]
            merged["indexing"] = {
                "upsert": indexing_config.get("upsert", True),
                "delete_missing": indexing_config.get("delete_missing", False),
            }

    if "global" in config:
        global_config = config["global"]
        if "qdrant" in global_config:
            merged["collection_name"] = global_config["qdrant"].get("collection", merged["collection_name"])
        if "indexing" in global_config:
            merged["batch_size"] = global_config["indexing"].get("batch_size", merged["batch_size"])
            merged["reindex_mode"] = global_config["indexing"].get("reindex_mode", merged["reindex_mode"])

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if args.docs_root:
        merged["docs_root"] = args.docs_root
    if args.site_base_url:
        merged["site_base_url"] = args.site_base_url
    if args.site_docs_prefix:
        merged["site_docs_prefix"] = args.site_docs_prefix
    if args.collection:
        merged["collection_name"] = args.collection
    if args.category_filter:
        merged["category_filter"] = args.category_filter
    if args.reindex:
        merged["reindex_mode"] = args.reindex
    if args.batch_size:
        merged["batch_size"] = args.batch_size

    return merged


def _merge_profile_config(base_config: Dict[str, Any], profile_config: Dict[str, Any]) -> Dict[str, Any]:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ—Ñ–∏–ª–µ–º."""
    import copy
    merged = copy.deepcopy(base_config)

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    def deep_merge(base: Dict, override: Dict) -> Dict:
        for key, value in override.items():
            if key in base and isinstance(base[key], dict) and isinstance(value, dict):
                deep_merge(base[key], value)
            else:
                base[key] = value
        return base

    return deep_merge(merged, profile_config)


def run_docusaurus_indexing(
    docs_root: str,
    site_base_url: str = "https://docs-chatcenter.edna.ru",
    site_docs_prefix: str = "/docs",
    collection_name: str = "docs_chatcenter",
    category_filter: Optional[str] = None,
    reindex_mode: str = "changed",
    batch_size: int = 16,
    chunk_max_tokens: int = 600,
    chunk_overlap_tokens: int = 120,
    cleaning_config: Optional[Dict[str, Any]] = None,
    routing_config: Optional[Dict[str, Any]] = None,
    indexing_config: Optional[Dict[str, Any]] = None
) -> dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é Docusaurus –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

    Args:
        docs_root: –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        site_base_url: –ë–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞
        site_docs_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ URL
        collection_name: –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant
        category_filter: –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê–†–ú_adm")
        reindex_mode: –†–µ–∂–∏–º –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ ("changed", "all")
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    """
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ Docusaurus –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    logger.info(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {docs_root}")
    logger.info(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {site_base_url}")
    logger.info(f"üìö –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {site_docs_prefix}")
    logger.info(f"üóÑÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
    logger.info(f"üîç –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_filter or '–Ω–µ—Ç'}")
    logger.info(f"üîÑ –†–µ–∂–∏–º: {reindex_mode}")

    docs_path = Path(docs_root)
    if not docs_path.exists():
        raise ValueError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {docs_root} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã payload
    logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ payload...")
    create_payload_indexes(collection_name)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
    all_chunks = []
    total_files = 0
    processed_files = 0

    logger.info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º crawler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    for item in crawl_docs(
        docs_root=docs_path,
        site_base_url=site_base_url,
        site_docs_prefix=site_docs_prefix,
        drop_prefix_all_levels=True
    ):
        total_files += 1

        try:
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            raw_text = item.abs_path.read_text(encoding="utf-8")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º markdown —Ñ–∞–π–ª
            doc_meta, chunks = process_markdown(
                raw_text=raw_text,
                abs_path=item.abs_path,
                rel_path=item.rel_path,
                site_url=item.site_url,
                dir_meta=item.dir_meta,
                default_category="UNSPECIFIED"
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if category_filter:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if doc_meta.get("category") != category_filter:
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            for chunk in chunks:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Chunk –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è indexer
                chunk_dict = {
                    "text": chunk.payload.get("chunk_text", ""),
                    "payload": chunk.payload
                }
                all_chunks.append(chunk_dict)

            processed_files += 1

            if processed_files % 10 == 0:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}/{total_files}")

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {item.abs_path}: {e}")
            continue

    logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}/{total_files}")
    logger.info(f"üì¶ –°–æ–±—Ä–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(all_chunks)}")

    if not all_chunks:
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        return {
            "success": False,
            "files_processed": processed_files,
            "total_files": total_files,
            "chunks_indexed": 0,
            "error": "–ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"
        }

    # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –±–∞—Ç—á–∞–º–∏
    logger.info(f"üî§ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é {len(all_chunks)} —á–∞–Ω–∫–æ–≤...")

    try:
        chunks_indexed = upsert_chunks(all_chunks)

        logger.success(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.success(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.success(f"   üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}/{total_files}")
        logger.success(f"   üì¶ –ß–∞–Ω–∫–æ–≤ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: {chunks_indexed}")

        return {
            "success": True,
            "files_processed": processed_files,
            "total_files": total_files,
            "chunks_indexed": chunks_indexed
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        return {
            "success": False,
            "files_processed": processed_files,
            "total_files": total_files,
            "chunks_indexed": 0,
            "error": str(e)
        }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(
        description="–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è Docusaurus –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ Qdrant",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  python -m ingestion.run --source docusaurus --config ingestion/config.yaml

  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  python -m ingestion.run --source docusaurus --config ingestion/config.yaml --category-filter –ê–†–ú_adm

  # –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
  python -m ingestion.run --source docusaurus --config ingestion/config.yaml --reindex all

  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  python -m ingestion.run --source docusaurus --config ingestion/config.yaml --profile development

  # –£–∫–∞–∑–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
  python -m ingestion.run --source docusaurus \\
    --config ingestion/config.yaml \\
    --docs-root "C:\\CC_RAG\\docs" \\
    --site-base-url "https://docs-chatcenter.edna.ru" \\
    --collection "docs_chatcenter"
        """
    )

    parser.add_argument(
        "--source",
        choices=["docusaurus"],
        required=True,
        help="–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    )

    parser.add_argument(
        "--docs-root",
        default="C:\\CC_RAG\\docs",
        help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: C:\\CC_RAG\\docs)"
    )

    parser.add_argument(
        "--site-base-url",
        default="https://docs-chatcenter.edna.ru",
        help="–ë–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://docs-chatcenter.edna.ru)"
    )

    parser.add_argument(
        "--site-docs-prefix",
        default="/docs",
        help="–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: /docs)"
    )

    parser.add_argument(
        "--collection",
        default="docs_chatcenter",
        help="–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Qdrant (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: docs_chatcenter)"
    )

    parser.add_argument(
        "--category-filter",
        help="–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–†–ú_adm)"
    )

    parser.add_argument(
        "--reindex",
        choices=["changed", "all"],
        default="changed",
        help="–†–µ–∂–∏–º –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: changed)"
    )

    parser.add_argument(
        "--batch-size",
        type=int,
        default=16,
        help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 16)"
    )

    parser.add_argument(
        "--config",
        default="ingestion/config.yaml",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ingestion/config.yaml)"
    )

    parser.add_argument(
        "--profile",
        help="–ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (development, production, testing)"
    )

    args = parser.parse_args()

    if args.source == "docusaurus":
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = load_config(args.config)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if args.profile and "profiles" in config and args.profile in config["profiles"]:
                profile_config = config["profiles"][args.profile]
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                config = _merge_profile_config(config, profile_config)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å: {args.profile}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            merged_config = merge_config_with_args(config, args)

            logger.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            logger.info(f"   üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {merged_config['docs_root']}")
            logger.info(f"   üåê –ë–∞–∑–æ–≤—ã–π URL: {merged_config['site_base_url']}")
            logger.info(f"   üìö –ü—Ä–µ—Ñ–∏–∫—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {merged_config['site_docs_prefix']}")
            logger.info(f"   üóÑÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è: {merged_config['collection_name']}")
            logger.info(f"   üîç –§–∏–ª—å—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {merged_config['category_filter'] or '–Ω–µ—Ç'}")
            logger.info(f"   üîÑ –†–µ–∂–∏–º: {merged_config['reindex_mode']}")
            logger.info(f"   üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {merged_config['batch_size']}")

            result = run_docusaurus_indexing(
                docs_root=merged_config["docs_root"],
                site_base_url=merged_config["site_base_url"],
                site_docs_prefix=merged_config["site_docs_prefix"],
                collection_name=merged_config["collection_name"],
                category_filter=merged_config["category_filter"],
                reindex_mode=merged_config["reindex_mode"],
                batch_size=merged_config["batch_size"],
                chunk_max_tokens=merged_config.get("chunk_max_tokens", 600),
                chunk_overlap_tokens=merged_config.get("chunk_overlap_tokens", 120),
                cleaning_config=merged_config.get("cleaning"),
                routing_config=merged_config.get("routing"),
                indexing_config=merged_config.get("indexing")
            )

            if result["success"]:
                logger.success("üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                sys.exit(0)
            else:
                logger.error(f"‚ùå –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                sys.exit(1)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)
    else:
        logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {args.source}")
        sys.exit(1)


if __name__ == "__main__":
    main()
