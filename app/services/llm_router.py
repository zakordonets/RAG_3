from __future__ import annotations

from typing import Any
import re
import requests
import telegramify_markdown
from app.config import CONFIG
from loguru import logger
from app.log_utils import write_debug_event


DEFAULT_LLM = CONFIG.default_llm


def _escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Telegram MarkdownV2, –Ω–µ —Ç—Ä–æ–≥–∞—è —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ.
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: _ * [ ] ( ) ~ ` > # + - = | { } . ! –∏ –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à.
    """
    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª—ç—à
    text = re.sub(r"\\", r"\\\\", text)
    # –ó–∞—Ç–µ–º —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –ö–†–û–ú–ï # –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º #, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –∫–∞–∫ Markdown –∑–∞–≥–æ–ª–æ–≤–æ–∫: ^#{1,6}\s
    def repl(m: re.Match[str]) -> str:
        ch = m.group(1)
        if ch == '#':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ### –ø—Ä–æ–±–µ–ª
            start = m.start(1)
            # –ù–∞–π–¥—ë–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
            line_start = text.rfind('\n', 0, start) + 1
            prefix = text[line_start:start]
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ # —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–∞–ª—å—à–µ –∏–¥—ë—Ç –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø—ã # ‚Äî –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            # –£–ø—Ä–æ—â—ë–Ω–Ω–æ: –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º #, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return '#'
        return '\\' + ch

    return re.sub(r"(?<!\\)([_*\[\]()~`>#+\-=|{}.!])", repl, text)


def _yandex_complete(prompt: str, max_tokens: int = 800, temperature: float | None = None, top_p: float | None = None, system_prompt: str | None = None) -> str:
    url = f"{CONFIG.yandex_api_url}/completion"
    logger.debug(f"Yandex URL: {url}")
    headers = {
        "Authorization": f"Api-Key {CONFIG.yandex_api_key}",
        "x-folder-id": CONFIG.yandex_catalog_id,
        "Content-Type": "application/json",
    }
    # Allow deterministic overrides from callers (e.g., RAGAS evaluator)
    _temperature = 0.2 if temperature is None else float(temperature)
    _top_p = 1.0 if top_p is None else float(top_p)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π system-—Ä–æ–ª–∏
    messages = []

    # –î–æ–±–∞–≤–ª—è–µ–º system-–ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if system_prompt:
        messages.append({
            "role": "system",
            "text": system_prompt
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    messages.append({
        "role": "user",
        "text": prompt
    })

    payload = {
        "modelUri": f"gpt://{CONFIG.yandex_catalog_id}/{CONFIG.yandex_model}",
        "completionOptions": {
            "stream": False,
            "temperature": _temperature,
            "topP": _top_p,
            "maxTokens": str(min(max_tokens, CONFIG.yandex_max_tokens))
        },
        "messages": messages
    }
    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=60)
        status = resp.status_code
        body_preview = resp.text[:500]
    except Exception as e:
        logger.error(f"Yandex request failed: {type(e).__name__}: {e}")
        raise
    if status != 200:
        logger.error(f"Yandex HTTP {status}: {body_preview}")
        resp.raise_for_status()
    try:
        data = resp.json()
    except Exception as e:
        logger.error(f"Yandex JSON parse error: {e}; body preview={body_preview!r}")
        raise
    # –û—Ç–≤–µ—Ç Yandex –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è; –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ completion
    try:
        text = data["result"]["alternatives"][0]["message"]["text"]
    except Exception:
        text = str(data)
    # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (repr, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
    logger.debug(f"LLM[Yandex] raw len={len(text)} preview={text[:200]!r}")
    return text


def _gpt5_complete(prompt: str, max_tokens: int = 800, system_prompt: str | None = None) -> str:
    if not CONFIG.gpt5_api_url or not CONFIG.gpt5_api_key:
        raise RuntimeError("GPT-5 creds are not set")
    headers = {"Authorization": f"Bearer {CONFIG.gpt5_api_key}", "Content-Type": "application/json"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π system-—Ä–æ–ª–∏
    messages = []

    # –î–æ–±–∞–≤–ª—è–µ–º system-–ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if system_prompt:
        messages.append({
            "role": "system",
            "content": system_prompt
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    messages.append({
        "role": "user",
        "content": prompt
    })

    payload = {"model": CONFIG.gpt5_model or "gpt5", "messages": messages, "max_tokens": max_tokens}
    resp = requests.post(CONFIG.gpt5_api_url, headers=headers, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    try:
        text = data["choices"][0]["message"]["content"]
    except Exception:
        text = str(data)
    logger.debug(f"LLM[GPT5] raw len={len(text)} preview={text[:200]!r}")
    return text


def _deepseek_complete(prompt: str, max_tokens: int = 800, system_prompt: str | None = None) -> str:
    headers = {"Authorization": f"Bearer {CONFIG.deepseek_api_key}", "Content-Type": "application/json"}

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π system-—Ä–æ–ª–∏
    messages = []

    # –î–æ–±–∞–≤–ª—è–µ–º system-–ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if system_prompt:
        messages.append({
            "role": "system",
            "content": system_prompt
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
    messages.append({
        "role": "user",
        "content": prompt
    })

    payload = {"model": CONFIG.deepseek_model, "messages": messages, "max_tokens": max_tokens}
    resp = requests.post(CONFIG.deepseek_api_url, headers=headers, json=payload, timeout=60)
    resp.raise_for_status()
    data = resp.json()
    try:
        text = data["choices"][0]["message"]["content"]
    except Exception:
        text = str(data)
    logger.debug(f"LLM[DEEPSEEK] raw len={len(text)} preview={text[:200]!r}")
    return text


def _format_for_telegram(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ telegramify_markdown.markdownify –¥–ª—è MarkdownV2."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º markdownify –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ MarkdownV2
        out = telegramify_markdown.markdownify(text)
        if out is None:
            logger.warning("telegramify_markdown.markdownify returned None")
            return text
        logger.debug("telegramify_markdown.markdownify: preview=%s", out[:120])
        return out
    except Exception as e:
        logger.warning(f"telegramify_markdown.markdownify failed: {type(e).__name__}: {e}")

    # –§–æ–ª–±—ç–∫: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
    return text


def generate_answer(query: str, context: list[dict], policy: dict[str, Any] | None = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä LLM —Å–æ–≥–ª–∞—Å–Ω–æ DEFAULT_LLM –∏ fallback-–ø–æ—Ä—è–¥–∫—É.
    - –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (URL) –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å "–ü–æ–¥—Ä–æ–±–Ω–µ–µ".
    - –ü–æ—Ä—è–¥–æ–∫: DEFAULT_LLM -> GPT5 -> DEEPSEEK.
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞—è —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    """
    policy = policy or {}
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª
    urls: list[str] = []
    content_blocks: list[str] = []
    for c in context:
        payload = c.get("payload", {}) or {}
        url = payload.get("url")
        if url:
            urls.append(str(url))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
        text = payload.get("text", "")
        title = payload.get("title", "")
        if text:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            content_block = f"üìÑ {title}\n" if title else f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n"
            content_block += f"üîó {url}\n"
            content_block += f"üìù {text[:800]}..."  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            content_blocks.append(content_block)

    sources_block = "\n".join(urls)
    context_block = "\n\n".join(content_blocks)

    # System-–ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    system_prompt = (
        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç edna Chat Center, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –º—É–ª—å—Ç–∏–¥–æ–∫—É–º–µ–Ω—Ç–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—ä–µ–¥–∏–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞. "
        "–û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (üìÑ) –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. "
        "–°—Ç—Ä–µ–º–∏—Å—å –∫ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–æ –Ω–µ —É–ø—É—Å—Ç–∏ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. "
        "–ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è —Ç–µ–º—ã."
    )

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    prompt = (
        f"–í–æ–ø—Ä–æ—Å: {query}\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n{context_block}\n\n"
        f"–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n{sources_block}\n\n"
        "–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. "
        "–ï—Å–ª–∏ —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ –Ω–∞–ø–∏—à–∏: ¬´–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö¬ª, "
        "–∏ –¥–∞–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–±–µ–∑ –¥–æ–º—ã—Å–ª–æ–≤), –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–∞–º.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî –æ–±—ã—á–Ω—ã–π Markdown:\n"
        "- –∏—Å–ø–æ–ª—å–∑—É–π **–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, —Å–ø–∏—Å–∫–∏ —Å ¬´- ¬ª –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ ¬´1.¬ª;\n"
        "- —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](URL); –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π URL;\n"
        "- –∫–æ–¥/–∫–æ–º–∞–Ω–¥—ã ‚Äî –≤ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö ``` (–±–µ–∑ —è–∑—ã–∫–∞);\n"
        "- –∏–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏."
    )

    order = [DEFAULT_LLM, "GPT5", "DEEPSEEK"]
    for provider in order:
        try:
            logger.debug(f"LLM provider attempt: {provider}")
            if provider == "YANDEX":
                answer = _yandex_complete(prompt, system_prompt=system_prompt)
                logger.debug(f"Before format [YANDEX] preview={answer[:200]!r}")
                write_debug_event("llm.answer", {"provider": "YANDEX", "len": len(answer), "preview": answer[:500]})
                return _format_for_telegram(answer)
            if provider == "GPT5":
                answer = _gpt5_complete(prompt, system_prompt=system_prompt)
                logger.debug(f"Before format [GPT5] preview={answer[:200]!r}")
                write_debug_event("llm.answer", {"provider": "GPT5", "len": len(answer), "preview": answer[:500]})
                return _format_for_telegram(answer)
            if provider == "DEEPSEEK":
                answer = _deepseek_complete(prompt, system_prompt=system_prompt)
                logger.debug(f"Before format [DEEPSEEK] preview={answer[:200]!r}")
                write_debug_event("llm.answer", {"provider": "DEEPSEEK", "len": len(answer), "preview": answer[:500]})
                return _format_for_telegram(answer)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É —Ñ–æ–ª–±—ç–∫–∞ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
            write_debug_event("llm.provider_error", {"provider": provider, "error": f"{type(e).__name__}: {e}"})
            logger.warning(f"Provider {provider} failed: {type(e).__name__}: {e}; trying next")
            continue
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
