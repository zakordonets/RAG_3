"""
API endpoints –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ RAGAS
"""
from __future__ import annotations

from flask import Blueprint, request, jsonify
from loguru import logger
import asyncio
from app.services.quality.quality_manager import quality_manager
from app.config import CONFIG

bp = Blueprint("quality", __name__)


@bp.get("/stats")
def get_quality_stats():
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥.

    –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã RAGAS:
    - –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ RAGAS (faithfulness, relevancy, precision)
    - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ (RAGAS + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–¥–±–µ–∫)
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞ (üëç / üëé)
    - –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.

    .. versionadded:: 4.3.0

    ---
    tags:
      - Quality
    parameters:
      - in: query
        name: days
        type: integer
        default: 30
        description: |
          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
          –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-365.
        minimum: 1
        maximum: 365
        example: 30
    produces:
      - application/json
    responses:
      200:
        description: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        schema:
          type: object
          properties:
            period_days:
              type: integer
              description: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
            total_interactions:
              type: integer
              description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–ø—Ä–æ—Å–æ–≤) –∑–∞ –ø–µ—Ä–∏–æ–¥
            avg_ragas_score:
              type: number
              format: float
              description: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ RAGAS (0.0-1.0, –≥–¥–µ 1.0 - –æ—Ç–ª–∏—á–Ω–æ)
            avg_faithfulness:
              type: number
              format: float
              description: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ faithfulness - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            avg_answer_relevancy:
              type: number
              format: float
              description: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ answer relevancy - —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å—É
            avg_context_precision:
              type: number
              format: float
              description: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ context precision - —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            avg_combined_score:
              type: number
              format: float
              description: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (RAGAS + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–¥–±–µ–∫)
            total_feedback:
              type: integer
              description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞
            positive_feedback:
              type: integer
              description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (üëç)
            negative_feedback:
              type: integer
              description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ (üëé)
            satisfaction_rate:
              type: number
              format: float
              description: |
                –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0).
                –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ positive / (positive + negative)
        examples:
          application/json:
            period_days: 30
            total_interactions: 1523
            avg_ragas_score: 0.87
            avg_faithfulness: 0.92
            avg_answer_relevancy: 0.88
            avg_context_precision: 0.87
            avg_combined_score: 0.85
            total_feedback: 245
            positive_feedback: 198
            negative_feedback: 47
            satisfaction_rate: 0.808
      400:
        description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞
        schema:
          type: object
          properties:
            error:
              type: string
              enum: [quality_db_disabled, invalid_days]
            message:
              type: string
        examples:
          application/json:
            error: "quality_db_disabled"
            message: "Quality database is disabled"
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "internal_error"
            message: "Failed to get quality statistics"
    """
    try:
        days = request.args.get('days', 30, type=int)

        if not CONFIG.quality_db_enabled:
            return jsonify({
                "error": "quality_db_disabled",
                "message": "Quality database is disabled"
            }), 400

        stats = asyncio.run(quality_manager.get_quality_statistics(days=days))

        return jsonify(stats)

    except Exception as e:
        logger.error(f"Error getting quality stats: {e}")
        return jsonify({
            "error": "internal_error",
            "message": "Failed to get quality statistics"
        }), 500


@bp.get("/interactions")
def get_quality_interactions():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏:
    - –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
    - RAGAS –º–µ—Ç—Ä–∏–∫–∏ (faithfulness, relevancy, precision)
    - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–¥–±–µ–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –ê–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - –ü–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ RAGAS –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞

    .. versionadded:: 4.3.0

    ---
    tags:
      - Quality
    parameters:
      - in: query
        name: limit
        type: integer
        default: 50
        description: |
          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.
          –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-1000.
        minimum: 1
        maximum: 1000
        example: 50
      - in: query
        name: offset
        type: integer
        default: 0
        description: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)
        minimum: 0
        example: 0
    produces:
      - application/json
    responses:
      200:
        description: –°–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        schema:
          type: object
          properties:
            interactions:
              type: array
              description: –°–ø–∏—Å–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
              items:
                type: object
                properties:
                  interaction_id:
                    type: string
                    format: uuid
                    description: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                  query:
                    type: string
                    description: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                  response:
                    type: string
                    description: –û—Ç–≤–µ—Ç —Å–∏—Å—Ç–µ–º—ã
                  ragas_overall_score:
                    type: number
                    format: float
                    description: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ RAGAS (0.0-1.0)
                  faithfulness:
                    type: number
                    format: float
                    description: –û—Ü–µ–Ω–∫–∞ faithfulness (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
                  answer_relevancy:
                    type: number
                    format: float
                    description: –û—Ü–µ–Ω–∫–∞ relevancy (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞)
                  context_precision:
                    type: number
                    format: float
                    description: –û—Ü–µ–Ω–∫–∞ precision (—Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
                  user_feedback_type:
                    type: string
                    enum: [positive, negative, null]
                    description: |
                      –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞.
                      null –µ—Å–ª–∏ —Ñ–∏–¥–±–µ–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.
                  feedback_text:
                    type: string
                    description: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                  combined_score:
                    type: number
                    format: float
                    description: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (RAGAS + —Ñ–∏–¥–±–µ–∫)
                  created_at:
                    type: string
                    format: date-time
                    description: –í—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                  channel:
                    type: string
                    enum: [telegram, web, api]
                    description: –ö–∞–Ω–∞–ª, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å
            total:
              type: integer
              description: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            limit:
              type: integer
              description: –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
            offset:
              type: integer
              description: –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        examples:
          application/json:
            interactions:
              - interaction_id: "550e8400-e29b-41d4-a716-446655440000"
                query: "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?"
                response: "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏..."
                ragas_overall_score: 0.89
                faithfulness: 0.92
                answer_relevancy: 0.88
                context_precision: 0.87
                user_feedback_type: "positive"
                feedback_text: "–ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç"
                combined_score: 0.91
                created_at: "2025-10-09T10:00:00Z"
                channel: "telegram"
            total: 1
            limit: 50
            offset: 0
      400:
        description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "quality_db_disabled"
            message: "Quality database is disabled"
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "internal_error"
            message: "Failed to get quality interactions"
    """
    try:
        limit = request.args.get('limit', 50, type=int)

        if not CONFIG.quality_db_enabled:
            return jsonify({
                "error": "quality_db_disabled",
                "message": "Quality database is disabled"
            }), 400

        interactions = asyncio.run(quality_manager.get_recent_interactions(limit=limit))

        return jsonify({
            "interactions": interactions,
            "total": len(interactions)
        })

    except Exception as e:
        logger.error(f"Error getting quality interactions: {e}")
        return jsonify({
            "error": "internal_error",
            "message": "Failed to get quality interactions"
        }), 500


@bp.get("/trends")
def get_quality_trends():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–µ—Ä–∏–æ–¥.

    –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–Ω–∞–º–∏–∫–∏:
    - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ RAGAS –ø–æ –¥–Ω—è–º
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ –¥–Ω—è–º
    - –¢—Ä–µ–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞
    - –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    - –í—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ Grafana/–¥–∞—à–±–æ—Ä–¥–∞—Ö

    .. versionadded:: 4.3.0

    ---
    tags:
      - Quality
    parameters:
      - in: query
        name: days
        type: integer
        default: 30
        description: |
          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤.
          –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-365.
        minimum: 1
        maximum: 365
        example: 30
    produces:
      - application/json
    responses:
      200:
        description: –¢—Ä–µ–Ω–¥—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –¥–Ω—è–º
        schema:
          type: object
          properties:
            trends:
              type: array
              description: –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                    description: –î–∞—Ç–∞ (ISO 8601 —Ñ–æ—Ä–º–∞—Ç)
                  avg_ragas_score:
                    type: number
                    format: float
                    description: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ RAGAS –∑–∞ –¥–µ–Ω—å
                  avg_combined_score:
                    type: number
                    format: float
                    description: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –¥–µ–Ω—å
                  total_interactions:
                    type: integer
                    description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –¥–µ–Ω—å
                  positive_feedback:
                    type: integer
                    description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∑–∞ –¥–µ–Ω—å
                  negative_feedback:
                    type: integer
                    description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫ –∑–∞ –¥–µ–Ω—å
                  satisfaction_rate:
                    type: number
                    format: float
                    description: –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å
            period_days:
              type: integer
              description: –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–Ω—è—Ö
        examples:
          application/json:
            trends:
              - date: "2025-10-09"
                avg_ragas_score: 0.87
                avg_combined_score: 0.85
                total_interactions: 45
                positive_feedback: 38
                negative_feedback: 7
                satisfaction_rate: 0.844
              - date: "2025-10-08"
                avg_ragas_score: 0.85
                avg_combined_score: 0.83
                total_interactions: 52
                positive_feedback: 40
                negative_feedback: 12
                satisfaction_rate: 0.769
            period_days: 30
      400:
        description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "quality_db_disabled"
            message: "Quality database is disabled"
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "internal_error"
            message: "Failed to get quality trends"
    """
    try:
        days = request.args.get('days', 30, type=int)

        if not CONFIG.quality_db_enabled:
            return jsonify({
                "error": "quality_db_disabled",
                "message": "Quality database is disabled"
            }), 400

        trends = asyncio.run(quality_manager.get_quality_trends(days=days))

        return jsonify({
            "trends": trends,
            "period_days": days
        })

    except Exception as e:
        logger.error(f"Error getting quality trends: {e}")
        return jsonify({
            "error": "internal_error",
            "message": "Failed to get quality trends"
        }), 500


@bp.get("/correlation")
def get_correlation_analysis():
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É RAGAS –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ñ–∏–¥–±–µ–∫–æ–º.

    –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ RAGAS (ML-based)
    - –†–µ–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Ñ–∏–¥–±–µ–∫–æ–º (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞)

    –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ RAGAS –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç
    —Ä–µ–∞–ª—å–Ω–æ–º—É –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

    –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:
    - 0.7-1.0: —Å–∏–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (RAGAS —Ö–æ—Ä–æ—à–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–¥–±–µ–∫)
    - 0.4-0.7: —Å—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
    - 0.0-0.4: —Å–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ RAGAS)

    .. versionadded:: 4.3.0

    ---
    tags:
      - Quality
    produces:
      - application/json
    responses:
      200:
        description: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
        schema:
          type: object
          properties:
            correlations:
              type: object
              description: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
              properties:
                ragas_feedback:
                  type: number
                  format: float
                  description: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –æ–±—â–µ–π RAGAS –æ—Ü–µ–Ω–∫–∏ —Å —Ñ–∏–¥–±–µ–∫–æ–º (-1.0 –¥–æ 1.0)
                faithfulness_feedback:
                  type: number
                  format: float
                  description: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è faithfulness —Å —Ñ–∏–¥–±–µ–∫–æ–º
                relevancy_feedback:
                  type: number
                  format: float
                  description: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è answer relevancy —Å —Ñ–∏–¥–±–µ–∫–æ–º
                precision_feedback:
                  type: number
                  format: float
                  description: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è context precision —Å —Ñ–∏–¥–±–µ–∫–æ–º
            sample_size:
              type: integer
              description: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∏–¥–±–µ–∫–æ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            interpretation:
              type: object
              description: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
              properties:
                overall_quality:
                  type: string
                  enum: [strong, moderate, weak]
                  description: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                recommendations:
                  type: array
                  description: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                  items:
                    type: string
        examples:
          application/json:
            correlations:
              ragas_feedback: 0.67
              faithfulness_feedback: 0.72
              relevancy_feedback: 0.65
              precision_feedback: 0.58
            sample_size: 245
            interpretation:
              overall_quality: "moderate"
              recommendations:
                - "–£–ª—É—á—à–∏—Ç—å context precision –º–µ—Ç—Ä–∏–∫—É"
                - "–°–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ —Ñ–∏–¥–±–µ–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞"
      400:
        description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "quality_db_disabled"
            message: "Quality database is disabled"
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞
        schema:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
        examples:
          application/json:
            error: "internal_error"
            message: "Failed to get correlation analysis"
    """
    try:
        if not CONFIG.quality_db_enabled:
            return jsonify({
                "error": "quality_db_disabled",
                "message": "Quality database is disabled"
            }), 400

        correlation = asyncio.run(quality_manager.get_correlation_analysis())

        return jsonify(correlation)

    except Exception as e:
        logger.error(f"Error getting correlation analysis: {e}")
        return jsonify({
            "error": "internal_error",
            "message": "Failed to get correlation analysis"
        }), 500


@bp.post("/feedback")
def add_feedback():
    """
    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π feedback –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é.

    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞:
    - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (üëç) - –æ—Ç–≤–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–π –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (üëé) - –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–µ—Ç–æ—á–Ω—ã–π –∏–ª–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π
    - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

    –§–∏–¥–±–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
    - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å RAGAS –º–µ—Ç—Ä–∏–∫–∞–º–∏
    - –í—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    - –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    - –û–±—É—á–µ–Ω–∏—è –∏ —Ç—é–Ω–∏–Ω–≥–∞ –º–æ–¥–µ–ª–µ–π

    .. versionadded:: 4.3.0

    ---
    tags:
      - Quality
    consumes:
      - application/json
    parameters:
      - in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            interaction_id:
              type: string
              format: uuid
              description: |
                UUID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –ø–æ–ª—è interaction_id –≤ –æ—Ç–≤–µ—Ç–µ /v1/chat/query.
                –î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞.
              example: "550e8400-e29b-41d4-a716-446655440000"
            feedback_type:
              type: string
              enum: [positive, negative]
              description: |
                –¢–∏–ø —Ñ–∏–¥–±–µ–∫–∞:
                - positive: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (üëç)
                - negative: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (üëé)
              example: "positive"
            feedback_text:
              type: string
              description: |
                –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                –ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.
              maxLength: 1000
              example: "–ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ!"
          required:
            - interaction_id
            - feedback_type
          example:
            interaction_id: "550e8400-e29b-41d4-a716-446655440000"
            feedback_type: "positive"
            feedback_text: "–ü–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç"
    produces:
      - application/json
    responses:
      200:
        description: Feedback —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        schema:
          type: object
          properties:
            message:
              type: string
              description: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            interaction_id:
              type: string
              format: uuid
              description: ID –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            feedback_type:
              type: string
              enum: [positive, negative]
              description: –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∏–¥–±–µ–∫–∞
            saved_at:
              type: string
              format: date-time
              description: –í—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
        examples:
          application/json:
            message: "Feedback added successfully"
            interaction_id: "550e8400-e29b-41d4-a716-446655440000"
            feedback_type: "positive"
            saved_at: "2025-10-09T10:00:00Z"
      400:
        description: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        schema:
          type: object
          properties:
            error:
              type: string
              enum:
                - no_data
                - missing_fields
                - invalid_feedback_type
                - quality_db_disabled
              description: –ö–æ–¥ –æ—à–∏–±–∫–∏
            message:
              type: string
              description: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
          required: [error, message]
        examples:
          missing_fields:
            error: "missing_fields"
            message: "interaction_id and feedback_type are required"
          invalid_type:
            error: "invalid_feedback_type"
            message: "feedback_type must be 'positive' or 'negative'"
          db_disabled:
            error: "quality_db_disabled"
            message: "Quality database is disabled"
      404:
        description: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        schema:
          type: object
          properties:
            error:
              type: string
              enum: [interaction_not_found]
            message:
              type: string
          required: [error, message]
        examples:
          application/json:
            error: "interaction_not_found"
            message: "Interaction with provided ID not found"
      500:
        description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
        schema:
          type: object
          properties:
            error:
              type: string
              enum: [internal_error, failed_to_add_feedback]
            message:
              type: string
          required: [error, message]
        examples:
          application/json:
            error: "failed_to_add_feedback"
            message: "Failed to add feedback"
    """
    try:
        data = request.get_json()

        if not data:
            return jsonify({
                "error": "no_data",
                "message": "No data provided"
            }), 400

        interaction_id = data.get("interaction_id")
        feedback_type = data.get("feedback_type")
        feedback_text = data.get("feedback_text", "")

        if not interaction_id or not feedback_type:
            return jsonify({
                "error": "missing_fields",
                "message": "interaction_id and feedback_type are required"
            }), 400

        if feedback_type not in ["positive", "negative"]:
            return jsonify({
                "error": "invalid_feedback_type",
                "message": "feedback_type must be 'positive' or 'negative'"
            }), 400

        if not CONFIG.quality_db_enabled:
            return jsonify({
                "error": "quality_db_disabled",
                "message": "Quality database is disabled"
            }), 400

        success = asyncio.run(quality_manager.add_user_feedback(
            interaction_id=interaction_id,
            feedback_type=feedback_type,
            feedback_text=feedback_text
        ))

        if success:
            return jsonify({
                "message": "Feedback added successfully",
                "interaction_id": interaction_id
            })
        else:
            return jsonify({
                "error": "failed_to_add_feedback",
                "message": "Failed to add feedback"
            }), 500

    except Exception as e:
        logger.error(f"Error adding feedback: {e}")
        return jsonify({
            "error": "internal_error",
            "message": "Failed to add feedback"
        }), 500
