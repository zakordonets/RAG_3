#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–æ–∫
"""
import sys
import os
import gc
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def setup_encoding():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    logger.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['PYTHONUTF8'] = '1'

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º stdout/stderr
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    if hasattr(sys.stderr, 'reconfigure'):
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')

    logger.success("‚úÖ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: UTF-8")

def safe_text_processing(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
    if not text:
        return ""

    try:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if isinstance(text, str):
            # –ü—Ä–æ–±—É–µ–º –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            text.encode('utf-8')
            return text
    except UnicodeEncodeError:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        try:
            return text.encode('utf-8', errors='ignore').decode('utf-8')
        except:
            return str(text).encode('utf-8', errors='ignore').decode('utf-8')

    return text

def optimize_environment():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

    # –£–º–µ–Ω—å—à–∞–µ–º batch_size –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    os.environ["EMBEDDING_BATCH_SIZE"] = "4"  # –ï—â–µ –º–µ–Ω—å—à–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    os.environ["SPARSE_BATCH_SIZE"] = "8"     # –£–º–µ–Ω—å—à–µ–Ω–æ
    os.environ["DENSE_BATCH_SIZE"] = "4"      # –£–º–µ–Ω—å—à–µ–Ω–æ

    # –£–º–µ–Ω—å—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    os.environ["EMBEDDING_MAX_LENGTH_DOC"] = "512"  # –ï—â–µ –º–µ–Ω—å—à–µ

    # –û—Ç–∫–ª—é—á–∞–µ–º DirectML –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
    os.environ["EMBEDDINGS_BACKEND"] = "onnx"  # –¢–æ–ª—å–∫–æ CPU

    # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±–∞—Ç—á–∏–Ω–≥
    os.environ["ADAPTIVE_BATCHING"] = "false"

    logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")

def run_fixed_indexing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")

    try:
        from scripts.indexer import Indexer

        indexer = Indexer()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        result = indexer.reindex(
            mode='full',
            strategy='jina',
            use_cache=True,
            max_pages=None,
            sparse=True,
            backend='onnx'  # –¢–æ–ª—å–∫–æ CPU –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        )

        if result['success']:
            logger.success("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 'N/A')}")
            logger.info(f"   –ß–∞–Ω–∫–æ–≤: {result.get('chunks', 'N/A')}")
            logger.info(f"   –í—Ä–µ–º—è: {result.get('duration', 'N/A')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {result.get('error', 'Unknown error')}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def cleanup_memory():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
    gc.collect()
    logger.info("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ö–û–î–ò–†–û–í–ö–ê–ú–ò")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
    setup_encoding()

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    optimize_environment()

    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    cleanup_memory()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    success = run_fixed_indexing()

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    cleanup_memory()

    if success:
        logger.success("üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        logger.error("üí• –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!")
        return 1

if __name__ == "__main__":
    sys.exit(main())
