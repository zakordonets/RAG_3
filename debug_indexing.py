#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π
"""
import sys
import os
import psutil
import gc
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_system_resources():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"""
    logger.info("=== –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´ ===")

    # CPU
    cpu_percent = psutil.cpu_percent(interval=1)
    logger.info(f"CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {cpu_percent}%")

    # Memory
    memory = psutil.virtual_memory()
    logger.info(f"–ü–∞–º—è—Ç—å: {memory.percent}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ({memory.used / 1024**3:.1f} GB / {memory.total / 1024**3:.1f} GB)")

    # Available memory
    available_gb = memory.available / 1024**3
    logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–º—è—Ç–∏: {available_gb:.1f} GB")

    if memory.percent > 90:
        logger.warning("‚ö†Ô∏è  –í–´–°–û–ö–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò!")
    if cpu_percent > 95:
        logger.warning("‚ö†Ô∏è  –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê CPU!")

def check_semantic_chunker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–µ—Ä–∞"""
    logger.info("=== –ü–†–û–í–ï–†–ö–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ß–ê–ù–ö–ï–†–ê ===")

    try:
        from ingestion.semantic_chunker import chunk_text_semantic, get_semantic_chunker
        logger.success("‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        try:
            chunker = get_semantic_chunker()
            logger.info(f"–ß–∞–Ω–∫–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: min_size={chunker.min_chunk_size}, max_size={chunker.max_chunk_size}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–µ—Ä–∞: {e}")

    except ImportError as e:
        logger.error(f"‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

    return True

def test_semantic_chunking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–∏–Ω–≥"""
    logger.info("=== –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ß–ê–ù–ö–ò–ù–ì–ê ===")

    test_text = """
    –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞.
    –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏.

    –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é. –í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    –¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–º—É.
    """

    try:
        from ingestion.chunker import chunk_text

        # –¢–µ—Å—Ç —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º —á–∞–Ω–∫–∏–Ω–≥–æ–º
        chunks = chunk_text(test_text, use_semantic=True)
        logger.info(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–∏–Ω–≥: {len(chunks)} —á–∞–Ω–∫–æ–≤")
        for i, chunk in enumerate(chunks):
            logger.debug(f"–ß–∞–Ω–∫ {i+1}: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –¢–µ—Å—Ç –±–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞
        chunks_simple = chunk_text(test_text, use_semantic=False)
        logger.info(f"–ü—Ä–æ—Å—Ç–æ–π —á–∞–Ω–∫–∏–Ω–≥: {len(chunks_simple)} —á–∞–Ω–∫–æ–≤")

        return len(chunks) > 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    logger.info("=== –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ===")

    dependencies = [
        'sentence_transformers',
        'numpy',
        'torch',
        'transformers'
    ]

    for dep in dependencies:
        try:
            __import__(dep)
            logger.success(f"‚úÖ {dep} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è  {dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ò–ù–î–ï–ö–°–ê–¶–ò–ò")

    check_system_resources()
    check_dependencies()

    if check_semantic_chunker():
        test_semantic_chunking()

    logger.info("=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    if memory.available < 4 * 1024**3:  # –ú–µ–Ω—å—à–µ 4GB
        logger.warning("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–∞–º—è—Ç—å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ batch_size")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
    cpu_count = psutil.cpu_count()
    logger.info(f"üí° –î–æ—Å—Ç—É–ø–Ω–æ CPU —è–¥–µ—Ä: {cpu_count}")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
    gc.collect()
    logger.info("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞")

if __name__ == "__main__":
    main()
