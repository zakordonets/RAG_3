#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BGE-M3 sparse –≤–µ–∫—Ç–æ—Ä–æ–≤
"""
import os
import sys
import numpy as np
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG
from app.services.bge_embeddings import _get_bge_model

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def test_bge_sparse_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BGE-M3 sparse –≤–µ–∫—Ç–æ—Ä–æ–≤"""

    logger.info("üß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BGE-M3 sparse –≤–µ–∫—Ç–æ—Ä–æ–≤")
    logger.info("=" * 60)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º BGE –º–æ–¥–µ–ª—å
        model = _get_bge_model()
        logger.info("‚úÖ BGE-M3 –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é sparse –≤–µ–∫—Ç–æ—Ä–æ–≤
        test_text = "–ö–∞–∫ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?"

        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: '{test_text}'")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings —Å sparse=True
        result = model.encode(
            [test_text],
            return_dense=True,
            return_sparse=True,
            return_colbert_vecs=False
        )

        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç BGE-M3:")
        logger.info(f"  - –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
        logger.info(f"  - –ö–ª—é—á–∏: {list(result.keys()) if isinstance(result, dict) else 'N/A'}")

        if isinstance(result, dict):
            for key, value in result.items():
                if isinstance(value, list):
                    logger.info(f"  - {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    if len(value) > 0:
                        logger.info(f"    - –†–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {len(value[0]) if hasattr(value[0], '__len__') else 'N/A'}")
                        if key == 'lexical_weights' and len(value[0]) > 0:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
                            sample = value[0][:10] if hasattr(value[0], '__getitem__') else value[0]
                            logger.info(f"    - Sample: {sample}")
                else:
                    logger.info(f"  - {key}: {type(value)} = {value}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ sparse –≤–µ–∫—Ç–æ—Ä—ã
        if 'lexical_weights' in result and result['lexical_weights']:
            lexical_weights = result['lexical_weights'][0]
            logger.info(f"üìä Lexical weights:")
            logger.info(f"  - –†–∞–∑–º–µ—Ä: {len(lexical_weights)}")
            logger.info(f"  - –¢–∏–ø: {type(lexical_weights)}")

            if hasattr(lexical_weights, '__len__') and len(lexical_weights) > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if hasattr(lexical_weights, '__iter__'):
                    non_zero_count = sum(1 for x in lexical_weights if x != 0)
                    logger.info(f"  - –ù–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {non_zero_count}")

                    if non_zero_count > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π
                        if hasattr(lexical_weights, 'argsort'):
                            # NumPy array
                            top_indices = np.argsort(lexical_weights)[-10:][::-1]
                            top_values = lexical_weights[top_indices]
                            logger.info(f"  - –¢–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π: {list(zip(top_indices, top_values))}")
                        else:
                            # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
                            sorted_items = sorted(enumerate(lexical_weights), key=lambda x: x[1], reverse=True)
                            logger.info(f"  - –¢–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π: {sorted_items[:10]}")
                    else:
                        logger.warning("‚ö†Ô∏è –í—Å–µ lexical weights —Ä–∞–≤–Ω—ã –Ω—É–ª—é!")
                else:
                    logger.info(f"  - –ó–Ω–∞—á–µ–Ω–∏–µ: {lexical_weights}")
            else:
                logger.warning("‚ö†Ô∏è Lexical weights –ø—É—Å—Ç—ã!")
        else:
            logger.warning("‚ö†Ô∏è Lexical weights –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ BGE-M3: {type(e).__name__}: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    test_bge_sparse_direct()
