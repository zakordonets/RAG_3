#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center"
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from app.services.retrieval import client, COLLECTION
from qdrant_client.models import Filter, FieldCondition, MatchValue

def check_whatis_content():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center'"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center'")
    print("=" * 70)

    try:
        # –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        results = client.scroll(
            collection_name=COLLECTION,
            scroll_filter=Filter(
                must=[
                    FieldCondition(
                        key="url",
                        match=MatchValue(value="https://docs-chatcenter.edna.ru/docs/start/whatis")
                    )
                ]
            ),
            limit=1,
            with_payload=True,
            with_vectors=False
        )

        if not results[0]:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        doc = results[0][0]
        text = doc.payload.get('text', '')
        title = doc.payload.get('title', 'N/A')
        url = doc.payload.get('url', 'N/A')

        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {title}")
        print(f"üîó URL: {url}")
        print(f"üìè –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        print("üìù –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
        print("-" * 70)
        print(text)
        print("-" * 70)
        print()

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        print("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")

        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
        channels = ['telegram', '–≤–µ–±-–≤–∏–¥–∂–µ—Ç', '–º–æ–±–∏–ª—å–Ω—ã–π', 'email', 'facebook', 'viber', 'whatsapp']
        found_channels = []

        for channel in channels:
            if channel.lower() in text.lower():
                found_channels.append(channel)

        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {found_channels}")

        # –ò—â–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
        sentences = text.split('.')
        channel_sentences = []

        for sentence in sentences:
            sentence = sentence.strip()
            if any(channel.lower() in sentence.lower() for channel in channels):
                channel_sentences.append(sentence)

        if channel_sentences:
            print(f"\nüìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö:")
            for i, sentence in enumerate(channel_sentences, 1):
                print(f"   {i}. {sentence}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        if '–∫–∞–Ω–∞–ª' in text.lower() and ('–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' in text.lower() or '–ø–æ–¥–∫–ª—é—á–∏—Ç—å' in text.lower()):
            print(f"\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")
        else:
            print(f"\n‚ùå –î–æ–∫—É–º–µ–Ω—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

if __name__ == "__main__":
    check_whatis_content()
