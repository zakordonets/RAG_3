#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from ingestion.universal_loader import UniversalLoader, load_content_universal


def test_content_type_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    loader = UniversalLoader()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            'name': 'Jina Reader –∫–æ–Ω—Ç–µ–Ω—Ç',
            'content': """Title: –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
URL Source: https://example.com
Markdown Content:

# –ó–∞–≥–æ–ª–æ–≤–æ–∫

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
""",
            'expected_type': 'jina_reader'
        },
        {
            'name': 'HTML Docusaurus',
            'content': """<!DOCTYPE html>
<html>
<head><title>Test</title></head>
<body>
<nav class="theme-doc-breadcrumbs">
<article class="theme-doc-markdown">
<div class="theme-doc-sidebar">
</body>
</html>""",
            'expected_type': 'html_docusaurus'
        },
        {
            'name': '–û–±—ã—á–Ω—ã–π HTML',
            'content': """<!DOCTYPE html>
<html>
<head><title>Test</title></head>
<body><h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1></body>
</html>""",
            'expected_type': 'html_generic'
        },
        {
            'name': 'Markdown',
            'content': """# –ó–∞–≥–æ–ª–æ–≤–æ–∫

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**

*–ö—É—Ä—Å–∏–≤*

## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫

–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
""",
            'expected_type': 'markdown'
        },
        {
            'name': '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç',
            'content': """–≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏.""",
            'expected_type': 'text'
        }
    ]
    
    passed = 0
    for case in test_cases:
        detected_type = loader.detect_content_type(case['content'])
        if detected_type == case['expected_type']:
            print(f"   ‚úÖ {case['name']}: {detected_type}")
            passed += 1
        else:
            print(f"   ‚ùå {case['name']}: –æ–∂–∏–¥–∞–ª–æ—Å—å {case['expected_type']}, –ø–æ–ª—É—á–µ–Ω–æ {detected_type}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == len(test_cases)


def test_page_type_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    loader = UniversalLoader()
    
    test_cases = [
        ('https://docs-chatcenter.edna.ru/docs/start/whatis', 'guide'),
        ('https://docs-chatcenter.edna.ru/docs/api/messages', 'api'),
        ('https://docs-chatcenter.edna.ru/faq', 'faq'),
        ('https://docs-chatcenter.edna.ru/blog/release-6.16', 'changelog'),
        ('https://docs-chatcenter.edna.ru/docs/admin/widget', 'admin'),
        ('https://docs-chatcenter.edna.ru/docs/supervisor/threadcontrol', 'supervisor'),
        ('https://docs-chatcenter.edna.ru/docs/agent/routing', 'agent'),
    ]
    
    passed = 0
    for url, expected_type in test_cases:
        detected_type = loader.detect_page_type(url)
        if detected_type == expected_type:
            print(f"   ‚úÖ {url}: {detected_type}")
            passed += 1
        else:
            print(f"   ‚ùå {url}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_type}, –ø–æ–ª—É—á–µ–Ω–æ {detected_type}")
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == len(test_cases)


def test_universal_loading():
    """–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            'name': 'Jina Reader —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏',
            'url': 'https://docs-chatcenter.edna.ru/docs/start/whatis',
            'content': """Title: –ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center | edna Chat Center
URL Source: https://docs-chatcenter.edna.ru/docs/start/whatis
Content Length: 2456
Language Detected: Russian
Published Time: 2024-07-24T10:30:00Z
Images: 3
Links: 12
Markdown Content:

# –ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center

edna Chat Center ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.

## –†–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ

- **–ê–≥–µ–Ω—Ç** ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±—â–∞–µ—Ç—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
- **–°—É–ø–µ—Ä–≤–∏–∑–æ—Ä** ‚Äî —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∞–≥–µ–Ω—Ç–æ–≤  
- **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** ‚Äî –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É

## –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã

- Telegram
- WhatsApp
- Viber
- –í–µ–±-–≤–∏–¥–∂–µ—Ç
""",
            'strategy': 'auto'
        },
        {
            'name': 'HTML Docusaurus',
            'url': 'https://docs-chatcenter.edna.ru/docs/agent/routing',
            'content': """<!DOCTYPE html>
<html>
<head>
    <title>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏</title>
    <meta name="description" content="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏">
</head>
<body>
    <nav class="theme-doc-breadcrumbs">
        <a href="/docs">–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
        <a href="/docs/agent">–ê–≥–µ–Ω—Ç</a>
    </nav>
    <article class="theme-doc-markdown">
        <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏</h1>
        <p>–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏.</p>
    </article>
</body>
</html>""",
            'strategy': 'auto'
        },
        {
            'name': '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π Jina Reader',
            'url': 'https://example.com/page',
            'content': """–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏.""",
            'strategy': 'force_jina'
        }
    ]
    
    passed = 0
    for case in test_cases:
        print(f"\nüìÑ –¢–µ—Å—Ç: {case['name']}")
        
        try:
            result = load_content_universal(case['url'], case['content'], case['strategy'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            required_fields = ['url', 'title', 'content', 'content_type', 'page_type']
            missing_fields = [field for field in required_fields if field not in result]
            
            if missing_fields:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if not result.get('content'):
                print(f"   ‚ùå –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            key_metadata = {
                'content_type': result.get('content_type'),
                'page_type': result.get('page_type'),
                'section': result.get('section'),
                'user_role': result.get('user_role'),
                'permissions': result.get('permissions'),
                'channels': result.get('channels'),
                'features': result.get('features')
            }
            
            print(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
            for key, value in key_metadata.items():
                if value is not None:
                    print(f"      {key}: {value}")
            
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            passed += 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    return passed == len(test_cases)


def test_loader_info():
    """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑—á–∏–∫–µ."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∑—á–∏–∫–µ...")
    
    loader = UniversalLoader()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    strategies = loader.get_supported_strategies()
    expected_strategies = ['auto', 'jina', 'html', 'force_jina', 'html_docusaurus', 'markdown', 'text']
    
    missing_strategies = [s for s in expected_strategies if s not in strategies]
    if missing_strategies:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {missing_strategies}")
        return False
    
    print(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategies}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_types = loader.get_content_type_info()
    if not content_types:
        print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return False
    
    print(f"   ‚úÖ –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:")
    for content_type, description in content_types.items():
        print(f"      {content_type}: {description}")
    
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞\n")
    
    tests = [
        test_content_type_detection,
        test_page_type_detection,
        test_universal_loading,
        test_loader_info,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
                print(f"‚úÖ –¢–µ—Å—Ç {test.__name__} –ø—Ä–æ–π–¥–µ–Ω")
            else:
                print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞:")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("   ‚Ä¢ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("   ‚Ä¢ –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print("   ‚Ä¢ –ì–∏–±–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞")
        print("   ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–¥ pipeline")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

