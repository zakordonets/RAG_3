#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞: –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ, –∫–æ–Ω—Ç–µ–Ω—Ç.
"""

import sys
from pathlib import Path
import json
import time
from typing import Dict, List, Any, Optional
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app.services.retrieval import client, COLLECTION
from ingestion.universal_loader import load_content_universal
from ingestion.parsers import parse_jina_content, extract_url_metadata


class DataQualityTester:
    """–¢–µ—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        self.client = client
        self.collection = COLLECTION
        self.test_results = []
    
    def test_empty_pages_detection(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä–∫—É —Ç–æ—á–µ–∫
            scroll_result = self.client.scroll(
                collection_name=self.collection,
                limit=50,
                with_payload=True,
                with_vectors=False
            )
            
            points = scroll_result[0]
            empty_pages = []
            short_pages = []
            
            for point in points:
                payload = point.get('payload', {})
                text = payload.get('text', '')
                url = payload.get('url', 'unknown')
                
                if not text or len(text.strip()) == 0:
                    empty_pages.append(url)
                elif len(text.strip()) < 50:
                    short_pages.append(url)
            
            return {
                "total_checked": len(points),
                "empty_pages": len(empty_pages),
                "short_pages": len(short_pages),
                "empty_urls": empty_pages[:10],  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                "short_urls": short_pages[:10]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
            return {"error": str(e)}
    
    def test_metadata_completeness(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            scroll_result = self.client.scroll(
                collection_name=self.collection,
                limit=50,
                with_payload=True,
                with_vectors=False
            )
            
            points = scroll_result[0]
            required_fields = [
                'url', 'title', 'content_type', 'section', 
                'user_role', 'permissions', 'content_length'
            ]
            
            field_stats = {field: 0 for field in required_fields}
            missing_fields = {field: [] for field in required_fields}
            
            for point in points:
                payload = point.get('payload', {})
                url = payload.get('url', 'unknown')
                
                for field in required_fields:
                    if field in payload and payload[field]:
                        field_stats[field] += 1
                    else:
                        missing_fields[field].append(url)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª–Ω–æ—Ç—ã
            completeness = {field: (count / len(points)) * 100 for field, count in field_stats.items()}
            
            return {
                "total_checked": len(points),
                "field_completeness": completeness,
                "missing_fields": {field: urls[:5] for field, urls in missing_fields.items() if urls}
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return {"error": str(e)}
    
    def test_content_quality(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        try:
            scroll_result = self.client.scroll(
                collection_name=self.collection,
                limit=50,
                with_payload=True,
                with_vectors=False
            )
            
            points = scroll_result[0]
            quality_issues = []
            
            for point in points:
                payload = point.get('payload', {})
                text = payload.get('text', '')
                url = payload.get('url', 'unknown')
                
                issues = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
                if len(text) < 100:
                    issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML —Ç–µ–≥–æ–≤
                if '<' in text and '>' in text:
                    issues.append("–°–æ–¥–µ—Ä–∂–∏—Ç HTML —Ç–µ–≥–∏")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤
                if text.strip() == '':
                    issues.append("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
                if len(set(text)) < 10:
                    issues.append("–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                
                if issues:
                    quality_issues.append({
                        "url": url,
                        "issues": issues
                    })
            
            return {
                "total_checked": len(points),
                "quality_issues": len(quality_issues),
                "issue_details": quality_issues[:10]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
            return {"error": str(e)}
    
    def test_url_metadata_extraction(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ URL."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ URL...")
        
        test_urls = [
            "https://docs-chatcenter.edna.ru/docs/start/whatis",
            "https://docs-chatcenter.edna.ru/docs/agent/quick-start",
            "https://docs-chatcenter.edna.ru/docs/supervisor/dashboard",
            "https://docs-chatcenter.edna.ru/docs/admin/settings",
            "https://docs-chatcenter.edna.ru/docs/api/create-agent",
            "https://docs-chatcenter.edna.ru/faq",
            "https://docs-chatcenter.edna.ru/blog/latest-updates"
        ]
        
        results = []
        
        for url in test_urls:
            try:
                metadata = extract_url_metadata(url)
                results.append({
                    "url": url,
                    "metadata": metadata,
                    "success": True
                })
            except Exception as e:
                results.append({
                    "url": url,
                    "error": str(e),
                    "success": False
                })
        
        successful = sum(1 for r in results if r['success'])
        
        return {
            "total_tested": len(test_urls),
            "successful": successful,
            "results": results
        }
    
    def test_jina_reader_parsing(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Jina Reader –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Jina Reader...")
        
        test_content = """Title: –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ | edna Chat Center
URL Source: https://docs-chatcenter.edna.ru/docs/test
Content Length: 1500
Language Detected: Russian
Published Time: 2024-01-01T00:00:00Z
Images: 2
Links: 8
Markdown Content:

# –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Jina Reader.

## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

1. **–§—É–Ω–∫—Ü–∏—è 1** ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ
2. **–§—É–Ω–∫—Ü–∏—è 2** ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ
3. **–§—É–Ω–∫—Ü–∏—è 3** ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

- –ü—É–Ω–∫—Ç 1
- –ü—É–Ω–∫—Ç 2
- –ü—É–Ω–∫—Ç 3
"""
        
        try:
            result = parse_jina_content(test_content)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['title', 'content', 'content_length', 'language_detected']
            missing_fields = [field for field in required_fields if field not in result]
            
            return {
                "success": True,
                "parsed_fields": list(result.keys()),
                "missing_fields": missing_fields,
                "content_length": len(result.get('content', '')),
                "title": result.get('title', ''),
                "language": result.get('language_detected', '')
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def test_content_loading_strategies(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        test_cases = [
            {
                "name": "Jina Reader –∫–æ–Ω—Ç–µ–Ω—Ç",
                "content": """Title: –¢–µ—Å—Ç
URL Source: https://example.com
Markdown Content:

# –¢–µ—Å—Ç

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ.""",
                "strategy": "auto"
            },
            {
                "name": "HTML Docusaurus",
                "content": """<!DOCTYPE html>
<html>
<body>
<nav class="theme-doc-breadcrumbs">
<article class="theme-doc-markdown">
<h1>–¢–µ—Å—Ç</h1>
<p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ.</p>
</article>
</body>
</html>""",
                "strategy": "auto"
            },
            {
                "name": "–û–±—ã—á–Ω—ã–π HTML",
                "content": """<!DOCTYPE html>
<html>
<head><title>–¢–µ—Å—Ç</title></head>
<body>
<h1>–¢–µ—Å—Ç</h1>
<p>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ.</p>
</body>
</html>""",
                "strategy": "auto"
            }
        ]
        
        results = []
        
        for case in test_cases:
            try:
                result = load_content_universal("https://example.com", case['content'], case['strategy'])
                
                results.append({
                    "name": case['name'],
                    "success": True,
                    "content_type": result.get('content_type'),
                    "title": result.get('title'),
                    "content_length": len(result.get('content', '')),
                    "has_content": bool(result.get('content'))
                })
                
            except Exception as e:
                results.append({
                    "name": case['name'],
                    "success": False,
                    "error": str(e)
                })
        
        successful = sum(1 for r in results if r['success'])
        
        return {
            "total_tested": len(test_cases),
            "successful": successful,
            "results": results
        }


def print_quality_report(empty_pages: Dict, metadata: Dict, content: Dict, 
                        url_metadata: Dict, jina_parsing: Dict, loading: Dict):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö."""
    print("\n" + "="*80)
    print("üìä –û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï –î–ê–ù–ù–´–•")
    print("="*80)
    
    # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if "error" not in empty_pages:
        print(f"\nüîç –ü–£–°–¢–´–ï –°–¢–†–ê–ù–ò–¶–´:")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {empty_pages['total_checked']}")
        print(f"   –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {empty_pages['empty_pages']}")
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {empty_pages['short_pages']}")
        
        if empty_pages['empty_urls']:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã –ø—É—Å—Ç—ã—Ö URL:")
            for url in empty_pages['empty_urls']:
                print(f"     ‚Ä¢ {url}")
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if "error" not in metadata:
        print(f"\nüìã –ú–ï–¢–ê–î–ê–ù–ù–´–ï:")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {metadata['total_checked']}")
        print(f"   –ü–æ–ª–Ω–æ—Ç–∞ –ø–æ–ª–µ–π:")
        for field, completeness in metadata['field_completeness'].items():
            print(f"     {field}: {completeness:.1f}%")
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if "error" not in content:
        print(f"\nüìù –ö–ê–ß–ï–°–¢–í–û –ö–û–ù–¢–ï–ù–¢–ê:")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {content['total_checked']}")
        print(f"   –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {content['quality_issues']}")
        
        if content['issue_details']:
            print(f"   –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–±–ª–µ–º:")
            for issue in content['issue_details'][:3]:
                print(f"     ‚Ä¢ {issue['url']}: {', '.join(issue['issues'])}")
    
    # URL –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    print(f"\nüîó –ú–ï–¢–ê–î–ê–ù–ù–´–ï URL:")
    print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ URL: {url_metadata['total_tested']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {url_metadata['successful']}")
    
    # Jina Reader –ø–∞—Ä—Å–∏–Ω–≥
    print(f"\nüìñ –ü–ê–†–°–ò–ù–ì JINA READER:")
    if jina_parsing['success']:
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {jina_parsing['title']}")
        print(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {jina_parsing['content_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –Ø–∑—ã–∫: {jina_parsing['language']}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {jina_parsing['error']}")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    print(f"\nüöÄ –°–¢–†–ê–¢–ï–ì–ò–ò –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {loading['total_tested']}")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {loading['successful']}")
    
    for result in loading['results']:
        if result['success']:
            print(f"   ‚úÖ {result['name']}: {result['content_type']} ({result['content_length']} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"   ‚ùå {result['name']}: {result['error']}")
    
    print("\n" + "="*80)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö\n")
    
    tester = DataQualityTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü...")
    empty_pages = tester.test_empty_pages_detection()
    
    print("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    metadata = tester.test_metadata_completeness()
    
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    content = tester.test_content_quality()
    
    print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URL –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
    url_metadata = tester.test_url_metadata_extraction()
    
    print("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Jina Reader –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    jina_parsing = tester.test_jina_reader_parsing()
    
    print("6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    loading = tester.test_content_loading_strategies()
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print_quality_report(empty_pages, metadata, content, url_metadata, jina_parsing, loading)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    total_tests = 6
    passed_tests = 0
    
    if "error" not in empty_pages:
        passed_tests += 1
    
    if "error" not in metadata:
        passed_tests += 1
    
    if "error" not in content:
        passed_tests += 1
    
    if url_metadata['successful'] > 0:
        passed_tests += 1
    
    if jina_parsing['success']:
        passed_tests += 1
    
    if loading['successful'] > 0:
        passed_tests += 1
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
