#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤ Qdrant
"""
import os
import sys
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG
from qdrant_client import QdrantClient
from ingestion.chunker import text_hash
import uuid

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def find_test_points():
    """–ò—â–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –≤ Qdrant"""

    logger.info("üîç –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –≤ Qdrant")
    logger.info("=" * 60)

    client = QdrantClient(url=CONFIG.qdrant_url, api_key=CONFIG.qdrant_api_key or None)

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞
    test_texts = [
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤ edna Chat Center",
        "API –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–Ω–æ–ø–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞"
    ]

    logger.info(f"üìù –ò—â–µ–º —Ç–æ—á–∫–∏ –¥–ª—è {len(test_texts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤...")

    try:
        found_points = 0
        for i, text in enumerate(test_texts):
            # –í—ã—á–∏—Å–ª—è–µ–º ID —Ç–æ—á–∫–∏ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –∏–Ω–¥–µ–∫—Å–µ—Ä–µ
            raw_hash = text_hash(text)
            hex32 = raw_hash.replace("-", "")[:32]
            pid = str(uuid.UUID(hex=hex32))

            logger.info(f"\nüìã –¢–µ—Å—Ç {i+1}: '{text}'")
            logger.info(f"  –û–∂–∏–¥–∞–µ–º—ã–π ID: {pid}")

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–∫—É –ø–æ ID
            try:
                points = client.retrieve(
                    collection_name=CONFIG.qdrant_collection,
                    ids=[pid],
                    with_payload=True,
                    with_vectors=True
                )

                if points:
                    point = points[0]
                    found_points += 1
                    logger.success(f"  ‚úÖ –¢–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!")

                    if hasattr(point, 'vector') and point.vector:
                        if isinstance(point.vector, dict):
                            vector_types = list(point.vector.keys())
                            logger.info(f"    –¢–∏–ø—ã –≤–µ–∫—Ç–æ—Ä–æ–≤: {vector_types}")

                            if 'sparse' in vector_types:
                                sparse_vec = point.vector['sparse']
                                if hasattr(sparse_vec, 'indices') and hasattr(sparse_vec, 'values'):
                                    logger.success(f"    ‚úÖ Sparse –≤–µ–∫—Ç–æ—Ä: {len(sparse_vec.indices)} –∏–Ω–¥–µ–∫—Å–æ–≤, {len(sparse_vec.values)} –∑–Ω–∞—á–µ–Ω–∏–π")
                                    logger.info(f"      –ò–Ω–¥–µ–∫—Å—ã: {sparse_vec.indices[:10]}...")
                                    logger.info(f"      –ó–Ω–∞—á–µ–Ω–∏—è: {[f'{v:.3f}' for v in sparse_vec.values[:10]]}...")
                                else:
                                    logger.warning(f"    ‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç sparse –≤–µ–∫—Ç–æ—Ä–∞: {sparse_vec}")
                            else:
                                logger.warning("    ‚ùå Sparse –≤–µ–∫—Ç–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                            if 'dense' in vector_types:
                                dense_vec = point.vector['dense']
                                logger.info(f"    Dense –≤–µ–∫—Ç–æ—Ä: {len(dense_vec)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        else:
                            logger.info(f"    –í–µ–∫—Ç–æ—Ä: {type(point.vector)}")
                    else:
                        logger.warning("    ‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.warning(f"  ‚ùå –¢–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            except Exception as e:
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ—á–∫–∏: {e}")

        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {found_points}/{len(test_texts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞–π–¥–µ–Ω–æ")

        if found_points > 0:
            logger.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ!")
            return True
        else:
            logger.error("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {type(e).__name__}: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    find_test_points()
