#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPU-—É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ Windows (DirectML + AMD Radeon RX 6700 XT).
"""

import time
import torch
import numpy as np
from typing import Dict, Any
from loguru import logger
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.gpu_utils import (
    get_device,
    get_gpu_memory_info,
    check_gpu_installation,
    benchmark_gpu_vs_cpu,
    get_optimal_batch_size,
    get_gpu_info
)
from app.config import CONFIG


def test_directml_availability() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DirectML."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DirectML...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º DirectML
    if not check_gpu_installation():
        print("‚ùå DirectML –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DirectML: pip install torch-directml")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
    device = get_device()
    if not device.startswith('dml'):
        print("‚ùå DirectML –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
        return False

    print(f"‚úÖ DirectML –¥–æ—Å—Ç—É–ø–µ–Ω: {device}")

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU
    gpu_info = get_gpu_info()
    if gpu_info.get('available'):
        print(f"üìä GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for device_info in gpu_info.get('devices', []):
            print(f"   {device_info['id']}: {device_info['name']}")

    return True


def test_embeddings_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")

    try:
        from app.services.embeddings import embed_dense, embed_dense_batch

        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = [
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG —Å–∏—Å—Ç–µ–º–∞?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫?",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"
        ]

        # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        start_time = time.time()
        for text in test_texts:
            embedding = embed_dense(text)
        single_time = time.time() - start_time
        print(f"   ‚úÖ –û–¥–∏–Ω–æ—á–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {single_time:.2f}s ({single_time/len(test_texts):.3f}s –Ω–∞ —Ç–µ–∫—Å—Ç)")

        # –¢–µ—Å—Ç –±–∞—Ç—á–µ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–µ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        start_time = time.time()
        batch_embeddings = embed_dense_batch(test_texts)
        batch_time = time.time() - start_time
        print(f"   ‚úÖ –ë–∞—Ç—á–µ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {batch_time:.2f}s ({batch_time/len(test_texts):.3f}s –Ω–∞ —Ç–µ–∫—Å—Ç)")

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        speedup = single_time / batch_time if batch_time > 0 else 1
        print(f"   üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {speedup:.2f}x")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return False


def test_reranker_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å reranker."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ reranker...")

    try:
        from app.services.rerank import rerank

        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        query = "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram?"
        candidates = [
            {"payload": {"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã", "title": "Telegram Bot"}},
            {"payload": {"text": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API endpoints", "title": "API Config"}},
            {"payload": {"text": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant", "title": "Qdrant Setup"}},
            {"payload": {"text": "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏", "title": "External Services"}},
            {"payload": {"text": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "title": "Monitoring"}},
        ]

        # –¢–µ—Å—Ç reranking
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reranking...")
        start_time = time.time()
        results = rerank(query, candidates, top_n=3)
        rerank_time = time.time() - start_time

        print(f"   ‚úÖ Reranking: {rerank_time:.3f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, result in enumerate(results, 1):
            title = result.get("payload", {}).get("title", "Unknown")
            score = result.get("rerank_score", 0)
            print(f"      {i}. {title} (score: {score:.3f})")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è reranker: {e}")
        return False


def test_semantic_chunker_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ chunker."""
    print("\n‚úÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ chunker...")

    try:
        from ingestion.semantic_chunker import chunk_text_semantic

        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = """
        RAG —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        –ó–∞—Ç–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.
        –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.
        –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –º–æ–¥–µ–ª–∏.
        """

        # –¢–µ—Å—Ç chunking
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ chunking...")
        start_time = time.time()
        chunks = chunk_text_semantic(test_text, use_overlap=False)
        chunk_time = time.time() - start_time

        print(f"   ‚úÖ Chunking: {chunk_time:.3f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(chunks)} —á–∞–Ω–∫–æ–≤")
        for i, chunk in enumerate(chunks, 1):
            print(f"      {i}. {chunk[:50]}...")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è chunker: {e}")
        return False


def test_directml_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –Ω–∞—à–µ–º—É –∫–æ–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ ONNXRuntime DML."""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ DirectML (ORT) ...")

    try:
        import onnxruntime as ort
        providers = getattr(ort, 'get_available_providers', lambda: [])()
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ ORT –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {providers}")
        if 'DmlExecutionProvider' not in providers:
            print("   ‚ö†Ô∏è DmlExecutionProvider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        # –ú–∏–∫—Ä–æ–±–µ–Ω—á–º–∞—Ä–∫: –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –±–∞—Ç—á–∞–º–∏
        from app.services.embeddings import embed_dense_batch
        texts = [
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG —Å–∏—Å—Ç–µ–º–∞?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫?",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
        ] * 5  # 25 —Ç–µ–∫—Å—Ç–æ–≤

        # –ü—Ä–æ–≥—Ä–µ–≤
        _ = embed_dense_batch(texts[:5])

        import time
        start = time.time()
        _ = embed_dense_batch(texts)
        total = time.time() - start
        print(f"   ORT DML batch(25) –≤—Ä–µ–º—è: {total:.3f}s, –Ω–∞ —Ç–µ–∫—Å—Ç: {total/len(texts):.3f}s")
        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ ORT —Ç–µ—Å—Ç–∞: {e}")
        return False


def test_memory_usage():
    """–û—Ü–µ–Ω–∫–∞ —É—Å–ª–æ–≤–Ω–æ–π "–µ–º–∫–æ—Å—Ç–∏" —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–∞ ORT DML."""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (ORT DML)...")

    try:
        import onnxruntime as ort
        providers = getattr(ort, 'get_available_providers', lambda: [])()
        if 'DmlExecutionProvider' not in providers:
            print("   ‚ö†Ô∏è DmlExecutionProvider –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        from app.services.embeddings import embed_dense_batch
        base = [
            "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG —Å–∏—Å—Ç–µ–º–∞?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫?",
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤",
        ]

        batch = base
        max_ok = 0
        while True:
            try:
                _ = embed_dense_batch(batch)
                max_ok = len(batch)
                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞—Ç—á
                if len(batch) >= 160:
                    break
                batch = batch + base
            except Exception as e:
                print(f"   –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª –ø—Ä–∏ –±–∞—Ç—á–µ {len(batch)}: {e}")
                break
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–∞—Ç—á: {max_ok}")
        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –µ–º–∫–æ—Å—Ç–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPU –Ω–∞ Windows (DirectML + Radeon RX 6700 XT)")
    print("=" * 80)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Windows")
    print(f"   GPU –≤–∫–ª—é—á–µ–Ω: {CONFIG.gpu_enabled}")
    print(f"   GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {CONFIG.gpu_device}")
    print(f"   –î–æ–ª—è –ø–∞–º—è—Ç–∏ GPU: {CONFIG.gpu_memory_fraction}")
    print(f"   Reranker —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {CONFIG.reranker_device}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("DirectML Availability", test_directml_availability),
        ("Embeddings Performance", test_embeddings_performance),
        ("Reranker Performance", test_reranker_performance),
        ("Semantic Chunker Performance", test_semantic_chunker_performance),
        ("DirectML Performance", test_directml_performance),
        ("Memory Usage", test_memory_usage),
    ]

    results = {}
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results[test_name] = False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")

    passed = sum(1 for result in results.values() if result)
    total = len(results)

    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test_name}")

    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! DirectML —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üí° –û–∂–∏–¥–∞–µ–º–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: 1.5-3x –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DirectML.")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DirectML: pip install torch-directml")
        return 1


if __name__ == "__main__":
    sys.exit(main())
