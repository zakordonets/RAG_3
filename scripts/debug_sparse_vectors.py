#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤
"""
import os
import sys
import numpy as np
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG
from app.services.bge_embeddings import embed_unified

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def debug_sparse_vectors():
    """–û—Ç–ª–∞–∂–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é sparse –≤–µ–∫—Ç–æ—Ä–æ–≤"""

    logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤")
    logger.info("=" * 50)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–ö–∞–∫ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?",
        "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏",
        "–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è",
        "routing configuration",
        "transfer thread"
    ]

    for i, query in enumerate(test_queries, 1):
        logger.info(f"\nüìù –¢–µ—Å—Ç {i}: '{query}'")
        logger.info("-" * 40)

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
            result = embed_unified(query)

            if isinstance(result, dict):
                dense_vecs = result.get("dense", [])
                sparse_vecs = result.get("sparse", [])
                lexical_weights = result.get("lexical_weights", [])

                logger.info(f"üìä Dense –≤–µ–∫—Ç–æ—Ä—ã: {len(dense_vecs)}")
                logger.info(f"üìä Sparse –≤–µ–∫—Ç–æ—Ä—ã: {len(sparse_vecs)}")
                logger.info(f"üìä Lexical weights: {len(lexical_weights)}")

                if dense_vecs:
                    logger.info(f"üìè Dense —Ä–∞–∑–º–µ—Ä: {len(dense_vecs[0]) if dense_vecs else 'N/A'}")

                if sparse_vecs:
                    logger.info(f"üìè Sparse —Ä–∞–∑–º–µ—Ä: {len(sparse_vecs[0]) if sparse_vecs else 'N/A'}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ sparse –∑–Ω–∞—á–µ–Ω–∏–π
                    if len(sparse_vecs[0]) > 0:
                        sparse_sample = sparse_vecs[0][:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
                        logger.info(f"üìã Sparse sample: {sparse_sample}")
                else:
                    logger.warning("‚ö†Ô∏è Sparse –≤–µ–∫—Ç–æ—Ä—ã –ø—É—Å—Ç—ã!")

                if lexical_weights:
                    logger.info(f"üìè Lexical weights —Ä–∞–∑–º–µ—Ä: {len(lexical_weights[0]) if lexical_weights else 'N/A'}")
                    if len(lexical_weights[0]) > 0:
                        weights_sample = lexical_weights[0][:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
                        logger.info(f"üìã Lexical weights sample: {weights_sample}")
                else:
                    logger.warning("‚ö†Ô∏è Lexical weights –ø—É—Å—Ç—ã!")

            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings: {type(e).__name__}: {e}")
            import traceback
            logger.error(traceback.format_exc())

def check_bge_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é BGE-M3"""

    logger.info("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BGE-M3")
    logger.info("=" * 50)

    logger.info(f"üìã Embeddings backend: {CONFIG.embeddings_backend}")
    logger.info(f"üìã Embedding device: {CONFIG.embedding_device}")
    logger.info(f"üìã Use sparse: {CONFIG.use_sparse}")
    logger.info(f"üìã Embedding normalize: {CONFIG.embedding_normalize}")
    logger.info(f"üìã Embedding use fp16: {CONFIG.embedding_use_fp16}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π backend –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    from app.services.bge_embeddings import _get_optimal_backend_strategy
    strategy = _get_optimal_backend_strategy()
    logger.info(f"üìã –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

def test_direct_bge_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç BGE-M3 –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é"""

    logger.info("\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BGE-M3")
    logger.info("=" * 50)

    try:
        from app.services.bge_embeddings import _get_bge_model

        # –ó–∞–≥—Ä—É–∂–∞–µ–º BGE –º–æ–¥–µ–ª—å
        model = _get_bge_model()
        logger.info("‚úÖ BGE-M3 –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é sparse –≤–µ–∫—Ç–æ—Ä–æ–≤
        test_text = "–ö–∞–∫ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?"

        logger.info(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: '{test_text}'")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings —Å sparse=True
        result = model.encode(
            [test_text],
            return_dense=True,
            return_sparse=True,
            return_colbert_vecs=False,
            normalize_embeddings=CONFIG.embedding_normalize
        )

        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç BGE-M3:")
        logger.info(f"  - Dense: {len(result['dense_vecs'])} –≤–µ–∫—Ç–æ—Ä–æ–≤")
        logger.info(f"  - Sparse: {len(result['lexical_weights'])} –≤–µ–∫—Ç–æ—Ä–æ–≤")

        if result['lexical_weights']:
            sparse_vec = result['lexical_weights'][0]
            logger.info(f"  - Sparse —Ä–∞–∑–º–µ—Ä: {len(sparse_vec)}")
            logger.info(f"  - Sparse –Ω–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {np.count_nonzero(sparse_vec)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 sparse –∑–Ω–∞—á–µ–Ω–∏–π
            if len(sparse_vec) > 0:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
                top_indices = np.argsort(sparse_vec)[-10:][::-1]
                top_values = sparse_vec[top_indices]
                logger.info(f"  - –¢–æ–ø-10 sparse –∑–Ω–∞—á–µ–Ω–∏–π: {list(zip(top_indices, top_values))}")
        else:
            logger.warning("‚ö†Ô∏è BGE-M3 –Ω–µ –≤–µ—Ä–Ω—É–ª sparse –≤–µ–∫—Ç–æ—Ä—ã!")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ BGE-M3: {type(e).__name__}: {e}")
        import traceback
        logger.error(traceback.format_exc())

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""

    logger.info("üöÄ –û—Ç–ª–∞–¥–∫–∞ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    check_bge_configuration()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º BGE-M3 –Ω–∞–ø—Ä—è–º—É—é
    test_direct_bge_model()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ embed_unified
    debug_sparse_vectors()

    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
