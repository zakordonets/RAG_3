#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from app.services.orchestrator import handle_query

def test_bot_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
    query = "–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —á–∞—Ç-—Ü–µ–Ω—Ç—Ä–µ"

    print(f"ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å: '{query}'")
    print("=" * 70)

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫...")
        response = handle_query(channel="test", chat_id="test", message=query)

        print(f"üìù –û—Ç–≤–µ—Ç –±–æ—Ç–∞:")
        print("-" * 70)
        print(response.get('answer', 'N/A'))
        print("-" * 70)
        print()

        print(f"üìä –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(response.get('sources', []))}")
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã: {len(response.get('contexts', []))}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.get('processing_time', 0):.2f}s")
        print()

        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
        for i, source in enumerate(response.get('sources', []), 1):
            print(f"   {i}. {source.get('title', 'N/A')}")
            print(f"      URL: {source.get('url', 'N/A')}")
            print(f"      Score: {source.get('score', 'N/A')}")
            print()

        print(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã:")
        for i, context in enumerate(response.get('contexts', [])[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   {i}. {context[:150]}...")
            print()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—É–∂–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        answer_lower = response.get('answer', '').lower()
        channels_mentioned = []

        if 'telegram' in answer_lower:
            channels_mentioned.append('Telegram')
        if 'whatsapp' in answer_lower:
            channels_mentioned.append('WhatsApp')
        if 'viber' in answer_lower:
            channels_mentioned.append('Viber')
        if '–∞–≤–∏—Ç–æ' in answer_lower or 'avito' in answer_lower:
            channels_mentioned.append('–ê–≤–∏—Ç–æ')
        if '–≤–µ–±-–≤–∏–¥–∂–µ—Ç' in answer_lower:
            channels_mentioned.append('–í–µ–±-–≤–∏–¥–∂–µ—Ç')
        if '–º–æ–±–∏–ª—å–Ω—ã–π' in answer_lower:
            channels_mentioned.append('–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

        print(f"üéØ –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
        print(f"   –£–ø–æ–º—è–Ω—É—Ç—ã–µ –∫–∞–Ω–∞–ª—ã: {', '.join(channels_mentioned) if channels_mentioned else '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}")

        expected_channels = ['Telegram', 'WhatsApp', 'Viber', '–ê–≤–∏—Ç–æ', '–í–µ–±-–≤–∏–¥–∂–µ—Ç', '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è']
        missing_channels = [ch for ch in expected_channels if ch not in channels_mentioned]

        if missing_channels:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–Ω–∞–ª—ã: {', '.join(missing_channels)}")
        else:
            print(f"   ‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã —É–ø–æ–º—è–Ω—É—Ç—ã")

        return response

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_bot_response()

if __name__ == "__main__":
    main()
