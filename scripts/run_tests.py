#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
"""

import sys
import subprocess
import argparse
from pathlib import Path

def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîß {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
    print("-" * 60)

    try:
        result = subprocess.run(cmd, check=True, capture_output=False)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥ {e.returncode})")
        return False
    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def check_services():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

    services = [
        ("Redis", "python -c \"import redis; r=redis.from_url('redis://localhost:6379'); print('OK' if r.ping() else 'ERROR')\""),
        ("Qdrant", "python -c \"from qdrant_client import QdrantClient; c=QdrantClient('localhost'); print('OK' if c.get_collections() is not None else 'ERROR')\"")
    ]

    all_ok = True
    for service_name, cmd in services:
        try:
            result = subprocess.run(cmd.split(), capture_output=True, text=True)
            status = "‚úÖ" if result.returncode == 0 else "‚ùå"
            print(f"  {status} {service_name}: {result.stdout.strip()}")
            if result.returncode != 0:
                all_ok = False
        except Exception as e:
            print(f"  ‚ùå {service_name}: –û—à–∏–±–∫–∞ - {e}")
            all_ok = False

    return all_ok

def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--type", choices=["unit", "integration", "e2e", "slow", "all", "fast"],
                       default="fast", help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--coverage", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞")
    parser.add_argument("--parallel", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--check-services", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏")
    parser.add_argument("--lint", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä—ã")
    parser.add_argument("--format", action="store_true", help="–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")

    args = parser.parse_args()

    print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–¢–ï–°–¢–û–í")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    if args.check_services:
        if not check_services():
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏.")
            return 1
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if args.format:
        run_command(["python", "-m", "black", "app/", "tests/", "scripts/", "--line-length=120"],
                   "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å black")
        run_command(["python", "-m", "isort", "app/", "tests/", "scripts/"],
                   "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ —Å isort")

    # –õ–∏–Ω—Ç–∏–Ω–≥
    if args.lint:
        run_command(["python", "-m", "flake8", "app/", "tests/", "scripts/",
                    "--max-line-length=120", "--ignore=E203,W503"],
                   "–õ–∏–Ω—Ç–∏–Ω–≥ —Å flake8")
        run_command(["python", "-m", "mypy", "app/", "--ignore-missing-imports"],
                   "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å mypy")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã pytest
    cmd = ["python", "-m", "pytest", "tests/"]

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if args.type == "unit":
        cmd.extend(["-m", "not slow and not integration"])
    elif args.type == "integration":
        cmd.extend(["-m", "integration"])
    elif args.type == "e2e":
        cmd.extend(["-m", "e2e"])
    elif args.type == "slow":
        cmd.extend(["-m", "slow"])
    elif args.type == "fast":
        cmd.extend(["-m", "not slow"])
    # "all" - –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤

    # –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    if args.coverage:
        cmd.extend(["--cov=app", "--cov-report=html", "--cov-report=term"])

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if args.parallel:
        cmd.extend(["-n", "auto"])

    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
    if args.verbose:
        cmd.append("-v")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_command(cmd, f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ({args.type})")

    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        if args.coverage:
            print("üìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ htmlcov/index.html")
        return 0
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        return 1

if __name__ == "__main__":
    sys.exit(main())
