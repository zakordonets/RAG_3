"""
–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ text –≤ payload —á–∞–Ω–∫–æ–≤ Qdrant
"""
import sys
sys.path.insert(0, '.')

from app.services.search.retrieval import client, COLLECTION

print("=" * 100)
print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –ü–û–õ–Ø 'text' –í QDRANT PAYLOAD")
print("=" * 100)

# –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
results = client.scroll(
    collection_name=COLLECTION,
    limit=20,
    with_payload=True,
    with_vectors=False
)

if not results[0]:
    print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞—è")
    sys.exit(1)

points = results[0]

print(f"\n‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(points)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n")
print("=" * 100)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É payload
has_text_count = 0
no_text_count = 0
empty_text_count = 0

for i, point in enumerate(points[:10], 1):
    payload = point.payload

    has_text = 'text' in payload
    text_value = payload.get('text', None)
    text_length = len(text_value) if text_value else 0

    if has_text:
        if text_length > 0:
            has_text_count += 1
        else:
            empty_text_count += 1
    else:
        no_text_count += 1

    url = payload.get('url', payload.get('canonical_url', payload.get('site_url', 'N/A')))

    print(f"\n–ß–∞–Ω–∫ #{i}:")
    print(f"  URL: {url[:80]}...")
    print(f"  Title: {payload.get('title', 'N/A')[:60]}")
    print(f"  –ü–æ–ª–µ 'text' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {'‚úÖ –î–ê' if has_text else '‚ùå –ù–ï–¢'}")

    if has_text:
        print(f"  –î–ª–∏–Ω–∞ text: {text_length} —Å–∏–º–≤–æ–ª–æ–≤")
        if text_length > 0:
            print(f"  –ù–∞—á–∞–ª–æ: {text_value[:80]}...")
        else:
            print(f"  ‚ö†Ô∏è  text = –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
    chunk_text = payload.get('chunk_text', None)
    content_length = payload.get('content_length', None)

    if chunk_text:
        print(f"  ‚ÑπÔ∏è  –ï—Å—Ç—å chunk_text: {len(chunk_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    if content_length:
        print(f"  ‚ÑπÔ∏è  –ï—Å—Ç—å content_length: {content_length}")

    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π payload
    if i == 1:
        print(f"\n  üìã –í—Å–µ –∫–ª—é—á–∏ payload:")
        for key in sorted(payload.keys()):
            value = payload[key]
            if isinstance(value, str):
                print(f"     - {key}: {type(value).__name__} (len={len(value)})")
            else:
                print(f"     - {key}: {type(value).__name__}")

print("\n" + "=" * 100)
print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
print("=" * 100)

total = len(points[:10])
print(f"\n  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {total}")
print(f"  ‚úÖ –ü–æ–ª–µ 'text' –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–µ: {has_text_count} ({100*has_text_count/total:.0f}%)")
print(f"  ‚ö†Ô∏è  –ü–æ–ª–µ 'text' –ø—É—Å—Ç–æ–µ: {empty_text_count} ({100*empty_text_count/total:.0f}%)")
print(f"  ‚ùå –ü–æ–ª–µ 'text' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {no_text_count} ({100*no_text_count/total:.0f}%)")

print("\n" + "=" * 100)

if no_text_count > 0 or empty_text_count > 0:
    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!")
    print("   –ü–æ–ª–µ 'text' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞–Ω–∫–∞—Ö")
    print("   –≠—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–ª–∏—è–µ—Ç –Ω–∞:")
    print("   - Boosting –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É")
    print("   - Reranking (–Ω–µ—á–µ–≥–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å)")
    print("   - Context optimization")
else:
    print("‚úÖ –ü–æ–ª–µ 'text' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤–æ –≤—Å–µ—Ö —á–∞–Ω–∫–∞—Ö")

print("=" * 100)
