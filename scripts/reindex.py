#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å BGE-M3 unified embeddings.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python scripts/reindex.py                    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
  python scripts/reindex.py --sparse          # —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ sparse vectors
  python scripts/reindex.py --backend=hybrid  # –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ hybrid backend
"""

import argparse
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from loguru import logger
from app.config import CONFIG
from ingestion.pipeline import crawl_and_index


def main():
    parser = argparse.ArgumentParser(description="–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å BGE-M3 unified embeddings")
    parser.add_argument("--sparse", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å sparse vectors (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    parser.add_argument("--backend", choices=["auto", "onnx", "bge", "hybrid"],
                       default="auto", help="–í—ã–±–æ—Ä backend –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    parser.add_argument("--batch-size", type=int, default=16, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    parser.add_argument("--max-length", type=int, default=1024, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    args = parser.parse_args()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if args.sparse:
        os.environ["USE_SPARSE"] = "true"
    if args.backend != "auto":
        os.environ["EMBEDDINGS_BACKEND"] = args.backend
    os.environ["EMBEDDING_BATCH_SIZE"] = str(args.batch_size)
    os.environ["EMBEDDING_MAX_LENGTH_DOC"] = str(args.max_length)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å BGE-M3 unified embeddings...")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:")
    logger.info(f"  EMBEDDINGS_BACKEND: {CONFIG.embeddings_backend}")
    logger.info(f"  EMBEDDING_DEVICE: {CONFIG.embedding_device}")
    logger.info(f"  USE_SPARSE: {CONFIG.use_sparse}")
    logger.info(f"  EMBEDDING_MAX_LENGTH_DOC: {CONFIG.embedding_max_length_doc}")
    logger.info(f"  EMBEDDING_BATCH_SIZE: {CONFIG.embedding_batch_size}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    from app.services.bge_embeddings import _get_optimal_backend_strategy
    optimal_backend = _get_optimal_backend_strategy()
    logger.info(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {optimal_backend}")

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    logger.info("üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")

    try:
        stats = crawl_and_index(incremental=False)
        logger.success(f"‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.success(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['pages']} —Å—Ç—Ä–∞–Ω–∏—Ü, {stats['chunks']} —á–∞–Ω–∫–æ–≤")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        from qdrant_client import QdrantClient
        client = QdrantClient(url=CONFIG.qdrant_url, api_key=CONFIG.qdrant_api_key or None)
        collection_info = client.get_collection(CONFIG.qdrant_collection)
        logger.success(f"üéØ –ò—Ç–æ–≥–æ –≤ –±–∞–∑–µ: {collection_info.points_count} –≤–µ–∫—Ç–æ—Ä–æ–≤")

    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è  –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    main()
