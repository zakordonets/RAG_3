#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CPU-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞ Windows.
"""

import time
import sys
import os
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import CONFIG


def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: GPU_ENABLED={CONFIG.gpu_enabled}")

        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        from app.services.embeddings import embed_dense
        print("   ‚úÖ –ú–æ–¥—É–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from app.services.rerank import rerank
        print("   ‚úÖ –ú–æ–¥—É–ª—å reranker –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from ingestion.semantic_chunker import chunk_text_semantic
        print("   ‚úÖ –ú–æ–¥—É–ª—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ chunker –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_embeddings_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏."""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"

        # –ò–º–∏—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        start_time = time.time()
        # –ü—Ä–æ—Å—Ç–æ–µ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–º–µ–Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        embedding = [hash(word) % 1000 for word in test_text.split()]
        end_time = time.time()

        print(f"   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥: {end_time - start_time:.4f}s")
        print(f"   üìä –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_reranker_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π reranker."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ reranker...")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        query = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        candidates = [
            {"payload": {"text": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 1", "title": "–î–æ–∫—É–º–µ–Ω—Ç 1"}},
            {"payload": {"text": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç 2", "title": "–î–æ–∫—É–º–µ–Ω—Ç 2"}},
            {"payload": {"text": "–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É—Ä–æ—Å 3", "title": "–î–æ–∫—É–º–µ–Ω—Ç 3"}},
        ]

        # –ü—Ä–æ—Å—Ç–æ–π reranking –ø–æ –¥–ª–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞
        start_time = time.time()
        for i, candidate in enumerate(candidates):
            text = candidate["payload"]["text"]
            # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            score = len(set(query.split()) & set(text.split())) / len(set(query.split()) | set(text.split()))
            candidates[i]["rerank_score"] = score

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score
        candidates.sort(key=lambda x: x.get("rerank_score", 0), reverse=True)
        end_time = time.time()

        print(f"   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π reranking: {end_time - start_time:.4f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for i, result in enumerate(candidates, 1):
            title = result["payload"]["title"]
            score = result["rerank_score"]
            print(f"      {i}. {title} (score: {score:.3f})")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_chunker_simple():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π chunker."""
    print("\n‚úÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ chunker...")

    try:
        test_text = """
        –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏.
        –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–±–∑–∞—Ü–µ–≤.
        –ö–∞–∂–¥—ã–π –∞–±–∑–∞—Ü –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —á–∞–Ω–∫–æ–º.
        –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞.
        """

        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ –∞–±–∑–∞—Ü–∞–º
        start_time = time.time()
        chunks = [p.strip() for p in test_text.split("\n\n") if p.strip()]
        end_time = time.time()

        print(f"   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π chunking: {end_time - start_time:.4f}s")
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(chunks)} —á–∞–Ω–∫–æ–≤")
        for i, chunk in enumerate(chunks, 1):
            print(f"      {i}. {chunk[:50]}...")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def test_system_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã."""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    try:
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        query = "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram?"

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π pipeline
        start_time = time.time()

        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        processed_query = query.lower().strip()

        # 2. –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
        documents = [
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã",
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API endpoints",
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant",
        ]

        # 3. Reranking (–ø—Ä–æ—Å—Ç–æ–π)
        scores = []
        for doc in documents:
            score = len(set(processed_query.split()) & set(doc.lower().split())) / len(set(processed_query.split()) | set(doc.lower().split()))
            scores.append(score)

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
        best_doc = documents[scores.index(max(scores))]
        answer = f"–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram: {best_doc}"

        end_time = time.time()

        print(f"   ‚úÖ –ü–æ–ª–Ω—ã–π pipeline: {end_time - start_time:.4f}s")
        print(f"   üìä –û—Ç–≤–µ—Ç: {answer}")

        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CPU-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞ Windows")
    print("=" * 70)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Windows")
    print(f"   GPU –≤–∫–ª—é—á–µ–Ω: {CONFIG.gpu_enabled}")
    print(f"   GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {CONFIG.gpu_device}")
    print(f"   Reranker —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {CONFIG.reranker_device}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("Basic Functionality", test_basic_functionality),
        ("Simple Embeddings", test_embeddings_simple),
        ("Simple Reranker", test_reranker_simple),
        ("Simple Chunker", test_chunker_simple),
        ("System Performance", test_system_performance),
    ]

    results = {}
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            results[test_name] = test_func()
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results[test_name] = False

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")

    passed = sum(1 for result in results.values() if result)
    total = len(results)

    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"   {status} {test_name}")

    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")

    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞ CPU.")
        print("üí° –î–ª—è GPU-—É—Å–∫–æ—Ä–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ PyTorch –¥–æ –≤–µ—Ä—Å–∏–∏ 2.6+")
        return 0
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
