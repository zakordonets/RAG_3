#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–≤–µ–∂–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–µ–∑ –∫–µ—à–∞
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

import time
from app.abstractions.data_source import plugin_manager
from app.services.optimized_pipeline import run_optimized_indexing
from ingestion.chunker import chunk_text

# Import data sources
from app.sources import edna_docs_source


def test_fresh_crawl():
    """–¢–µ—Å—Ç —Å–≤–µ–∂–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("üîç –¢–ï–°–¢ –°–í–ï–ñ–ï–ô –ó–ê–ì–†–£–ó–ö–ò –°–¢–†–ê–ù–ò–¶–´")
    print("=" * 50)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó –∫–µ—à–∞
        edna_config = {
            "base_url": "https://docs-chatcenter.edna.ru/",
            "strategy": "jina",
            "use_cache": False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à!
            "max_pages": 1
        }

        source = plugin_manager.get_source("edna_docs", edna_config)
        crawl_result = source.fetch_pages(max_pages=1)

        if not crawl_result.pages:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            return False

        page = crawl_result.pages[0]
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page.title}")
        print(f"   URL: {page.url}")
        print(f"   –¢–∏–ø: {page.page_type.value}")
        print(f"   –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(page.content)} —Å–∏–º–≤–æ–ª–æ–≤")

        if len(page.content) > 0:
            print(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {page.content[:200]}...")

            # –¢–µ—Å—Ç chunking
            chunks = chunk_text(page.content)
            print(f"   üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

            if chunks:
                for i, chunk in enumerate(chunks[:2]):
                    print(f"      –ß–∞–Ω–∫ {i+1}: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤")
                return True
            else:
                print(f"   ‚ùå –ß–∞–Ω–∫–∏ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                return False
        else:
            print(f"   ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π!")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_optimized_pipeline_fresh():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ pipeline —Å —Å–≤–µ–∂–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    print("\nüîç –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û PIPELINE (–°–í–ï–ñ–ê–Ø –ó–ê–ì–†–£–ó–ö–ê)")
    print("=" * 50)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –ë–ï–ó –∫–µ—à–∞
        result = run_optimized_indexing(
            source_name="edna_docs",
            max_pages=3,  # –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            chunk_strategy="adaptive"
        )

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:")
        print(f"   –£—Å–ø–µ—Ö: {'‚úÖ' if result['success'] else '‚ùå'}")
        print(f"   –°—Ç—Ä–∞–Ω–∏—Ü: {result.get('pages', 0)}")
        print(f"   –ß–∞–Ω–∫–æ–≤: {result.get('chunks', 0)}")
        print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result.get('duration', 0):.2f}s")

        if result.get('errors', 0) > 0:
            print(f"   –û—à–∏–±–∫–∏: {result['errors']}")

        return result['success']

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ pipeline: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–ï–ñ–ï–ô –ó–ê–ì–†–£–ó–ö–ò")
    print("=" * 80)

    results = []

    # –¢–µ—Å—Ç 1: –°–≤–µ–∂–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    result1 = test_fresh_crawl()
    results.append(("–°–≤–µ–∂–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", result1))

    # –¢–µ—Å—Ç 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π pipeline
    result2 = test_optimized_pipeline_fresh()
    results.append(("Pipeline —Å–≤–µ–∂–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", result2))

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)

    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}: {'OK' if result else '–ü—Ä–æ–±–ª–µ–º–∞'}")

    successful_tests = sum(1 for _, result in results if result)
    print(f"\nüìà –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{len(results)}")

    if successful_tests == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


if __name__ == "__main__":
    main()
