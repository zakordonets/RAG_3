#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Phase 2 RAGAS —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. Telegram feedback –∫–Ω–æ–ø–∫–∏
2. API endpoints –¥–ª—è quality –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å orchestrator
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ quality interactions
"""

import sys
import os
import asyncio
import requests
import time
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from loguru import logger
from app.config import CONFIG
from app.services.quality_manager import quality_manager


async def test_quality_manager():
    """–¢–µ—Å—Ç Quality Manager"""
    logger.info("üß™ Testing Quality Manager...")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await quality_manager.initialize()
        logger.info("‚úÖ Quality Manager initialized")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ interaction
        interaction_id = await quality_manager.evaluate_interaction(
            query="–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?",
            response="–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API endpoints...",
            contexts=["–ö–æ–Ω—Ç–µ–∫—Å—Ç 1", "–ö–æ–Ω—Ç–µ–∫—Å—Ç 2"],
            sources=["https://docs.example.com/1", "https://docs.example.com/2"]
        )

        logger.info(f"‚úÖ Created interaction: {interaction_id}")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ feedback
        success = await quality_manager.add_user_feedback(
            interaction_id=interaction_id,
            feedback_type="positive",
            feedback_text="–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç!"
        )

        if success:
            logger.info("‚úÖ User feedback added")
        else:
            logger.warning("‚ö†Ô∏è Failed to add user feedback")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = await quality_manager.get_quality_statistics(days=7)
        logger.info(f"‚úÖ Quality statistics: {stats}")

        return True

    except Exception as e:
        logger.error(f"‚ùå Quality Manager test failed: {e}")
        return False


def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints"""
    logger.info("üß™ Testing API endpoints...")

    base_url = "http://localhost:9000"

    try:
        # –¢–µ—Å—Ç health check
        response = requests.get(f"{base_url}/v1/admin/health", timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ Health check passed")
        else:
            logger.warning(f"‚ö†Ô∏è Health check failed: {response.status_code}")

        # –¢–µ—Å—Ç quality stats endpoint
        response = requests.get(f"{base_url}/v1/admin/quality/stats?days=7", timeout=10)
        if response.status_code == 200:
            stats = response.json()
            logger.info(f"‚úÖ Quality stats endpoint: {stats}")
        else:
            logger.warning(f"‚ö†Ô∏è Quality stats failed: {response.status_code}")

        # –¢–µ—Å—Ç quality interactions endpoint
        response = requests.get(f"{base_url}/v1/admin/quality/interactions?limit=10", timeout=10)
        if response.status_code == 200:
            interactions = response.json()
            logger.info(f"‚úÖ Quality interactions endpoint: {len(interactions.get('interactions', []))} interactions")
        else:
            logger.warning(f"‚ö†Ô∏è Quality interactions failed: {response.status_code}")

        # –¢–µ—Å—Ç quality trends endpoint
        response = requests.get(f"{base_url}/v1/admin/quality/trends?days=7", timeout=10)
        if response.status_code == 200:
            trends = response.json()
            logger.info(f"‚úÖ Quality trends endpoint: {len(trends.get('trends', []))} trends")
        else:
            logger.warning(f"‚ö†Ô∏è Quality trends failed: {response.status_code}")

        return True

    except Exception as e:
        logger.error(f"‚ùå API endpoints test failed: {e}")
        return False


def test_chat_api_with_interaction_id():
    """–¢–µ—Å—Ç Chat API —Å interaction_id"""
    logger.info("üß™ Testing Chat API with interaction_id...")

    base_url = "http://localhost:9000"

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{base_url}/v1/chat/query",
            json={
                "message": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?",
                "channel": "api",
                "chat_id": "test_user"
            },
            timeout=30
        )

        if response.status_code == 200:
            data = response.json()
            logger.info(f"‚úÖ Chat API response received")
            logger.info(f"   Answer length: {len(data.get('answer', ''))}")
            logger.info(f"   Sources: {len(data.get('sources', []))}")
            logger.info(f"   Interaction ID: {data.get('interaction_id', 'None')}")

            if data.get('interaction_id'):
                logger.info("‚úÖ Interaction ID returned successfully")
                return data['interaction_id']
            else:
                logger.warning("‚ö†Ô∏è No interaction_id returned")
                return None
        else:
            logger.error(f"‚ùå Chat API failed: {response.status_code} - {response.text}")
            return None

    except Exception as e:
        logger.error(f"‚ùå Chat API test failed: {e}")
        return None


def test_feedback_api(interaction_id: str):
    """–¢–µ—Å—Ç Feedback API"""
    logger.info("üß™ Testing Feedback API...")

    base_url = "http://localhost:9000"

    try:
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ feedback
        response = requests.post(
            f"{base_url}/v1/admin/quality/feedback",
            json={
                "interaction_id": interaction_id,
                "feedback_type": "positive",
                "feedback_text": "–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç!"
            },
            timeout=10
        )

        if response.status_code == 200:
            logger.info("‚úÖ Positive feedback added via API")
        else:
            logger.warning(f"‚ö†Ô∏è Positive feedback failed: {response.status_code}")

        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ feedback
        response = requests.post(
            f"{base_url}/v1/admin/quality/feedback",
            json={
                "interaction_id": interaction_id,
                "feedback_type": "negative",
                "feedback_text": "–ù–µ—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç"
            },
            timeout=10
        )

        if response.status_code == 200:
            logger.info("‚úÖ Negative feedback added via API")
        else:
            logger.warning(f"‚ö†Ô∏è Negative feedback failed: {response.status_code}")

        return True

    except Exception as e:
        logger.error(f"‚ùå Feedback API test failed: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ Phase 2 Integration Test")
    logger.info("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info(f"üìã Configuration:")
    logger.info(f"   RAGAS enabled: {CONFIG.enable_ragas_evaluation}")
    logger.info(f"   Quality DB enabled: {CONFIG.quality_db_enabled}")
    logger.info(f"   Database URL: {CONFIG.database_url}")

    results = []

    # 1. –¢–µ—Å—Ç Quality Manager
    logger.info("\n1Ô∏è‚É£ Testing Quality Manager...")
    quality_result = await test_quality_manager()
    results.append(("Quality Manager", quality_result))

    # 2. –¢–µ—Å—Ç API endpoints
    logger.info("\n2Ô∏è‚É£ Testing API endpoints...")
    api_result = test_api_endpoints()
    results.append(("API Endpoints", api_result))

    # 3. –¢–µ—Å—Ç Chat API —Å interaction_id
    logger.info("\n3Ô∏è‚É£ Testing Chat API with interaction_id...")
    interaction_id = test_chat_api_with_interaction_id()
    chat_result = interaction_id is not None
    results.append(("Chat API Integration", chat_result))

    # 4. –¢–µ—Å—Ç Feedback API
    if interaction_id:
        logger.info("\n4Ô∏è‚É£ Testing Feedback API...")
        feedback_result = test_feedback_api(interaction_id)
        results.append(("Feedback API", feedback_result))
    else:
        logger.warning("‚ö†Ô∏è Skipping Feedback API test (no interaction_id)")
        results.append(("Feedback API", False))

    # –ò—Ç–æ–≥–∏
    logger.info("\nüìä Test Results:")
    logger.info("=" * 50)

    passed = 0
    total = len(results)

    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"   {test_name}: {status}")
        if result:
            passed += 1

    logger.info(f"\nüéØ Summary: {passed}/{total} tests passed")

    if passed == total:
        logger.info("üéâ All Phase 2 tests passed! System is ready for production.")
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} tests failed. Please check the issues above.")

    return passed == total


if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except Exception as e:
        logger.error(f"Test failed with exception: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
