#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π YandexGPT (/latest, /rc, /deprecated)
"""
import os
import sys
import requests
import json
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def test_model_version(version_suffix=""):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏"""

    model_name = f"yandexgpt{version_suffix}"
    model_uri = f"gpt://{CONFIG.yandex_catalog_id}/{model_name}"

    logger.info(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
    logger.info(f"üì§ Model URI: {model_uri}")

    url = f"{CONFIG.yandex_api_url}/completion"
    headers = {
        "Authorization": f"Api-Key {CONFIG.yandex_api_key}",
        "x-folder-id": CONFIG.yandex_catalog_id,
        "Content-Type": "application/json",
    }

    payload = {
        "modelUri": model_uri,
        "completionOptions": {
            "stream": False,
            "temperature": 0.1,
            "maxTokens": "100"
        },
        "messages": [
            {
                "role": "user",
                "text": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –º–æ–¥–µ–ª—å? –ù–∞–∑–æ–≤–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—é."
            }
        ]
    }

    try:
        resp = requests.post(url, headers=headers, json=payload, timeout=30)
        status = resp.status_code

        if status == 200:
            data = resp.json()
            model_version = data.get("result", {}).get("modelVersion", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            response_text = data["result"]["alternatives"][0]["message"]["text"]
            usage = data.get("result", {}).get("usage", {})

            logger.success(f"‚úÖ {model_name} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            logger.info(f"üìã –í–µ—Ä—Å–∏—è: {model_version}")
            logger.info(f"üìã –û—Ç–≤–µ—Ç: {response_text}")
            logger.info(f"üìä –¢–æ–∫–µ–Ω—ã: {usage.get('totalTokens', 'N/A')}")

            return {
                "success": True,
                "model_name": model_name,
                "model_version": model_version,
                "response": response_text,
                "usage": usage
            }
        else:
            logger.warning(f"‚ö†Ô∏è {model_name}: HTTP {status} - {resp.text[:200]}")
            return {
                "success": False,
                "model_name": model_name,
                "error": f"HTTP {status}"
            }

    except Exception as e:
        logger.error(f"‚ùå {model_name}: {type(e).__name__}: {e}")
        return {
            "success": False,
            "model_name": model_name,
            "error": str(e)
        }

def main():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ YandexGPT"""

    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π YandexGPT")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not CONFIG.yandex_api_key:
        logger.error("‚ùå Yandex API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    if not CONFIG.yandex_catalog_id:
        logger.error("‚ùå Yandex Catalog ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    logger.info(f"üìã Catalog ID: {CONFIG.yandex_catalog_id}")
    logger.info(f"üìã API URL: {CONFIG.yandex_api_url}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    versions = [
        "",           # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (yandexgpt)
        "/latest",    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
        "/rc",        # Release candidate
        "/deprecated" # –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –≤–µ—Ä—Å–∏—è
    ]

    results = []

    for version_suffix in versions:
        result = test_model_version(version_suffix)
        results.append(result)

    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\n" + "=" * 60)
    logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    logger.info("=" * 60)

    working_models = []

    for result in results:
        if result["success"]:
            logger.success(f"‚úÖ {result['model_name']}: {result['model_version']}")
            working_models.append(result)
        else:
            logger.error(f"‚ùå {result['model_name']}: {result['error']}")

    if working_models:
        logger.info(f"\nüéØ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–±–æ—á–∏—Ö –º–æ–¥–µ–ª–µ–π: {len(working_models)}")

        # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ª—É—á—à—É—é –≤–µ—Ä—Å–∏—é
        if any(r["model_name"] == "yandexgpt/rc" for r in working_models):
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ yandexgpt/rc –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤–µ–π—à–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º")
        elif any(r["model_name"] == "yandexgpt/latest" for r in working_models):
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ yandexgpt/latest –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏")
        else:
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é yandexgpt")
    else:
        logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")

if __name__ == "__main__":
    main()
