#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –º–æ–¥–µ–ª–∏ YandexGPT
"""
import os
import sys
import requests
import json
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def check_yandex_model():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å YandexGPT –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ YandexGPT")
    logger.info("=" * 50)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    logger.info(f"API URL: {CONFIG.yandex_api_url}")
    logger.info(f"Catalog ID: {CONFIG.yandex_catalog_id}")
    logger.info(f"Model: {CONFIG.yandex_model}")
    logger.info(f"Max Tokens: {CONFIG.yandex_max_tokens}")
    logger.info(f"API Key: {'*' * 20}{CONFIG.yandex_api_key[-4:] if CONFIG.yandex_api_key else 'None'}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    url = f"{CONFIG.yandex_api_url}/completion"
    headers = {
        "Authorization": f"Api-Key {CONFIG.yandex_api_key}",
        "x-folder-id": CONFIG.yandex_catalog_id,
        "Content-Type": "application/json",
    }

    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    payload = {
        "modelUri": f"gpt://{CONFIG.yandex_catalog_id}/{CONFIG.yandex_model}",
        "completionOptions": {
            "stream": False,
            "temperature": 0.1,
            "maxTokens": "100"
        },
        "messages": [
            {
                "role": "user",
                "text": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–≤–æ—è –º–æ–¥–µ–ª—å? –ù–∞–∑–æ–≤–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å."
            }
        ]
    }

    try:
        logger.info(f"\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫: {url}")
        logger.info(f"üì§ Model URI: gpt://{CONFIG.yandex_catalog_id}/{CONFIG.yandex_model}")

        resp = requests.post(url, headers=headers, json=payload, timeout=30)
        status = resp.status_code

        logger.info(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")

        if status == 200:
            data = resp.json()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            try:
                model_version = data.get("result", {}).get("modelVersion", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                usage = data.get("result", {}).get("usage", {})
                response_text = data["result"]["alternatives"][0]["message"]["text"]

                logger.success("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                logger.info(f"üìã –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {model_version}")
                logger.info(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {CONFIG.yandex_model}")
                logger.info(f"üìã –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ —Å–≤–æ—ë–º –Ω–∞–∑–≤–∞–Ω–∏–∏: {response_text}")

                # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
                if usage:
                    logger.info(f"üìä –¢–æ–∫–µ–Ω—ã:")
                    logger.info(f"  - –í—Ö–æ–¥–Ω—ã–µ: {usage.get('inputTextTokens', 'N/A')}")
                    logger.info(f"  - –í—ã—Ö–æ–¥–Ω—ã–µ: {usage.get('completionTokens', 'N/A')}")
                    logger.info(f"  - –í—Å–µ–≥–æ: {usage.get('totalTokens', 'N/A')}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                logger.info(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:")
                logger.info(json.dumps(data, ensure_ascii=False, indent=2))

                return {
                    "success": True,
                    "model_version": model_version,
                    "response_text": response_text,
                    "usage": usage,
                    "full_response": data
                }

            except KeyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
                logger.info(f"üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=2)}")
                return {"success": False, "error": f"Parse error: {e}"}

        else:
            logger.error(f"‚ùå HTTP {status}: {resp.text[:500]}")
            return {"success": False, "error": f"HTTP {status}"}

    except requests.exceptions.Timeout:
        logger.error("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        return {"success": False, "error": "Timeout"}
    except requests.exceptions.ConnectionError:
        logger.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return {"success": False, "error": "Connection error"}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
        return {"success": False, "error": str(e)}

def check_available_models():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)"""

    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    logger.info("=" * 50)

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    endpoints = [
        "/models",
        "/foundationModels",
        "/llm/v1alpha/models"
    ]

    headers = {
        "Authorization": f"Api-Key {CONFIG.yandex_api_key}",
        "x-folder-id": CONFIG.yandex_catalog_id,
        "Content-Type": "application/json",
    }

    for endpoint in endpoints:
        url = f"{CONFIG.yandex_api_url}{endpoint}"
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {url}")
            resp = requests.get(url, headers=headers, timeout=10)

            if resp.status_code == 200:
                data = resp.json()
                logger.success(f"‚úÖ –ù–∞–π–¥–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç: {url}")
                logger.info(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False, indent=2)[:500]}...")
                return data
            else:
                logger.warning(f"‚ö†Ô∏è {url}: HTTP {resp.status_code}")

        except Exception as e:
            logger.debug(f"‚ùå {url}: {e}")

    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ YandexGPT")
    logger.info("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not CONFIG.yandex_api_key:
        logger.error("‚ùå Yandex API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    if not CONFIG.yandex_catalog_id:
        logger.error("‚ùå Yandex Catalog ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
    result = check_yandex_model()

    if result["success"]:
        logger.info("\n" + "=" * 60)
        logger.success("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {CONFIG.yandex_model}")
        logger.info(f"üìã –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {result['model_version']}")
        logger.info(f"üìã –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –æ —Å–≤–æ—ë–º –Ω–∞–∑–≤–∞–Ω–∏–∏: {result['response_text']}")
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    check_available_models()

if __name__ == "__main__":
    main()
