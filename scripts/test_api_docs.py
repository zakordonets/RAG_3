#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Swagger UI –∏ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""

import requests
import json
import sys
from typing import Dict, Any


def test_swagger_ui(base_url: str = "http://localhost:9000") -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Swagger UI."""
    try:
        response = requests.get(f"{base_url}/apidocs", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå Swagger UI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Swagger UI: {e}")
        return False


def test_openapi_spec(base_url: str = "http://localhost:9000") -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    try:
        response = requests.get(f"{base_url}/apispec_1.json", timeout=10)
        if response.status_code == 200:
            spec = response.json()
            print("‚úÖ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            if "swagger" in spec and "info" in spec:
                print(f"   –í–µ—Ä—Å–∏—è OpenAPI: {spec.get('swagger', 'unknown')}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ API: {spec.get('info', {}).get('title', 'unknown')}")
                print(f"   –í–µ—Ä—Å–∏—è API: {spec.get('info', {}).get('version', 'unknown')}")

                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º endpoints
                paths = spec.get('paths', {})
                endpoint_count = len(paths)
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ endpoints: {endpoint_count}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
                if endpoint_count > 0:
                    print("   –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
                    for path in sorted(paths.keys()):
                        methods = list(paths[path].keys())
                        print(f"     {path} [{', '.join(methods).upper()}]")

                return True
            else:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
                return False
        else:
            print(f"‚ùå OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


def test_api_endpoints(base_url: str = "http://localhost:9000") -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints."""
    endpoints = [
        ("GET", "/v1/admin/health", "Health check"),
        ("GET", "/v1/admin/metrics", "Metrics"),
        ("GET", "/v1/admin/circuit-breakers", "Circuit Breakers"),
        ("GET", "/v1/admin/cache", "Cache status"),
        ("GET", "/v1/admin/rate-limiter", "Rate Limiter"),
        ("GET", "/v1/admin/security", "Security status"),
    ]

    success_count = 0
    total_count = len(endpoints)

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {total_count} API endpoints:")

    for method, path, description in endpoints:
        try:
            url = f"{base_url}{path}"
            response = requests.request(method, url, timeout=10)

            if response.status_code == 200:
                print(f"   ‚úÖ {method} {path} - {description}")
                success_count += 1
            else:
                print(f"   ‚ùå {method} {path} - {description} (HTTP {response.status_code})")
        except Exception as e:
            print(f"   ‚ùå {method} {path} - {description} (–û—à–∏–±–∫–∞: {e})")

    success_rate = (success_count / total_count) * 100
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç ({success_rate:.1f}%)")

    return success_count == total_count


def test_chat_api(base_url: str = "http://localhost:9000") -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π chat API."""
    try:
        print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Chat API:")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_data = {
            "message": "–¢–µ—Å—Ç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
            "channel": "api",
            "chat_id": "test_docs"
        }

        response = requests.post(
            f"{base_url}/v1/chat/query",
            json=test_data,
            timeout=30
        )

        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ Chat API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìù –û—Ç–≤–µ—Ç: {result.get('answer', 'N/A')[:100]}...")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 'N/A')}s")
            return True
        else:
            print(f"   ‚ùå Chat API –æ—à–∏–±–∫–∞: HTTP {response.status_code}")
            print(f"   üìù –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            return False

    except Exception as e:
        print(f"   ‚ùå Chat API –æ—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)

    base_url = "http://localhost:9000"

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    swagger_ok = test_swagger_ui(base_url)
    spec_ok = test_openapi_spec(base_url)
    endpoints_ok = test_api_endpoints(base_url)
    chat_ok = test_chat_api(base_url)

    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    print(f"   Swagger UI: {'‚úÖ' if swagger_ok else '‚ùå'}")
    print(f"   OpenAPI Spec: {'‚úÖ' if spec_ok else '‚ùå'}")
    print(f"   API Endpoints: {'‚úÖ' if endpoints_ok else '‚ùå'}")
    print(f"   Chat API: {'‚úÖ' if chat_ok else '‚ùå'}")

    all_ok = swagger_ok and spec_ok and endpoints_ok and chat_ok

    if all_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print(f"üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {base_url}/apidocs")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
        sys.exit(1)


if __name__ == "__main__":
    main()
