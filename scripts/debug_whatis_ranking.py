#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center"
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from app.services.retrieval import hybrid_search, client, COLLECTION
from app.services.bge_embeddings import embed_unified
from qdrant_client.models import Filter, FieldCondition, MatchValue

def debug_whatis_ranking():
    """–û—Ç–ª–∞–¥–∏—Ç—å —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center'"""
    query = "–ö–∞–∫–∏–µ –∫–∞–Ω–∞–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —á–∞—Ç-—Ü–µ–Ω—Ç—Ä–µ"

    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    print("1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center'...")
    whatis_results = client.scroll(
        collection_name=COLLECTION,
        scroll_filter=Filter(
            must=[
                FieldCondition(
                    key="url",
                    match=MatchValue(value="https://docs-chatcenter.edna.ru/docs/start/whatis")
                )
            ]
        ),
        limit=1,
        with_payload=True,
        with_vectors=False
    )

    if whatis_results[0]:
        whatis_doc = whatis_results[0][0]
        print(f"   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:")
        print(f"      ID: {whatis_doc.id}")
        print(f"      Title: {whatis_doc.payload.get('title', 'N/A')}")
        print(f"      URL: {whatis_doc.payload.get('url', 'N/A')}")
        print(f"      Content length: {whatis_doc.payload.get('content_length', 0)}")
        print(f"      Text preview: {whatis_doc.payload.get('text', '')[:200]}...")
        print()
    else:
        print("   ‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return

    # 2. –í—ã–ø–æ–ª–Ω–∏–º –ø–æ–∏—Å–∫ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("2. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")

    embeddings = embed_unified(query, return_dense=True, return_sparse=True)
    dense_vec = embeddings['dense_vecs'][0]
    sparse_vec = embeddings['sparse_vecs'][0]

    # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    results = hybrid_search(
        query_dense=dense_vec,
        query_sparse=sparse_vec,
        k=20  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    )

    print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print()

    # 3. –ù–∞–π–¥–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center"
    whatis_position = None
    for i, result in enumerate(results):
        url = result.get('payload', {}).get('url', '')
        if 'whatis' in url:
            whatis_position = i + 1
            whatis_result = result
            break

    if whatis_position:
        print(f"3. –î–æ–∫—É–º–µ–Ω—Ç '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center' –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {whatis_position}")
        print(f"   Score: {whatis_result.get('rrf_score', 0):.6f}")
        print(f"   URL: {whatis_result.get('payload', {}).get('url', 'N/A')}")
        print()

        # 4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("4. –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results[:10]):
            score = result.get('rrf_score', 0)
            payload = result.get('payload', {})
            title = payload.get('title', 'N/A')
            url = payload.get('url', 'N/A')
            content_length = payload.get('content_length', 0)

            # –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            text = payload.get('text', '').lower()
            keywords = ['–∫–∞–Ω–∞–ª', 'telegram', '–≤–µ–±-–≤–∏–¥–∂–µ—Ç', '–º–æ–±–∏–ª—å–Ω—ã–π', '—á–∞—Ç-—Ü–µ–Ω—Ç—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è']
            keyword_matches = sum(1 for keyword in keywords if keyword in text)

            is_whatis = 'whatis' in url
            marker = "üéØ" if is_whatis else "  "

            print(f"   {marker} {i+1:2d}. Score: {score:.6f} | Keywords: {keyword_matches}/6 | Length: {content_length}")
            print(f"       Title: {title}")
            print(f"       URL: {url}")
            print()
    else:
        print("3. ‚ùå –î–æ–∫—É–º–µ–Ω—Ç '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–æ–ø-20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        # –ü–æ–∫–∞–∂–µ–º —Ç–æ–ø-5 –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print("\n   –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results[:5]):
            score = result.get('rrf_score', 0)
            payload = result.get('payload', {})
            title = payload.get('title', 'N/A')
            url = payload.get('url', 'N/A')
            print(f"      {i+1}. Score: {score:.6f} | {title}")

    # 5. –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ "–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center"
    if whatis_results[0]:
        print("5. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ß—Ç–æ —Ç–∞–∫–æ–µ edna Chat Center':")
        text = whatis_results[0][0].payload.get('text', '')

        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        keywords = ['–∫–∞–Ω–∞–ª', 'telegram', '–≤–µ–±-–≤–∏–¥–∂–µ—Ç', '–º–æ–±–∏–ª—å–Ω—ã–π', '—á–∞—Ç-—Ü–µ–Ω—Ç—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è']
        found_keywords = []
        for keyword in keywords:
            if keyword in text.lower():
                found_keywords.append(keyword)

        print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö: {len(found_keywords)}/{len(keywords)}")

        # –ù–∞–π–¥–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        sentences = text.split('.')
        relevant_sentences = []
        for sentence in sentences:
            if any(keyword in sentence.lower() for keyword in keywords):
                relevant_sentences.append(sentence.strip())

        if relevant_sentences:
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
            for sentence in relevant_sentences[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"      ‚Ä¢ {sentence[:150]}...")
        else:
            print("   ‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    debug_whatis_ranking()
