#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""
import sys
import os
sys.path.append(os.getcwd())

from app.services.bge_embeddings import _get_optimal_backend_strategy
from app.config import CONFIG
from loguru import logger
import time

def test_system_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    logger.info("=== System Capabilities Detection ===")

    # Check CUDA
    try:
        import torch
        has_cuda = torch.cuda.is_available()
        if has_cuda:
            logger.info("‚úÖ CUDA available")
            logger.info(f"   Device: {torch.cuda.get_device_name()}")
            logger.info(f"   Memory: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
        else:
            logger.info("‚ùå CUDA not available")
    except ImportError:
        logger.info("‚ùå PyTorch not available")

    # Check DirectML
    try:
        import onnxruntime as ort
        providers = ort.get_available_providers()
        if "DmlExecutionProvider" in providers:
            logger.info("‚úÖ DirectML available")
            logger.info(f"   Available providers: {providers}")
        else:
            logger.info("‚ùå DirectML not available")
            logger.info(f"   Available providers: {providers}")
    except ImportError:
        logger.info("‚ùå ONNX Runtime not available")

    # Check BGE-M3 availability
    try:
        from FlagEmbedding import BGEM3FlagModel
        logger.info("‚úÖ FlagEmbedding (BGE-M3) available")
    except ImportError:
        logger.info("‚ùå FlagEmbedding (BGE-M3) not available")

def test_strategy_selection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    logger.info("=== Strategy Selection Test ===")

    # Test with current configuration
    logger.info(f"Current EMBEDDINGS_BACKEND: {CONFIG.embeddings_backend}")

    if CONFIG.embeddings_backend == "auto":
        optimal_strategy = _get_optimal_backend_strategy()
        logger.info(f"üéØ Optimal strategy selected: {optimal_strategy}")
    else:
        logger.info(f"üîß Using explicit configuration: {CONFIG.embeddings_backend}")
        optimal_strategy = CONFIG.embeddings_backend

    return optimal_strategy

def test_strategy_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    from app.services.bge_embeddings import embed_unified

    optimal_strategy = test_strategy_selection()
    logger.info(f"=== Performance Test ({optimal_strategy}) ===")

    test_text = "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —á–∞—Ç–æ–≤ –∏–∑ –≤–µ–±-–≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –≤ edna Chat Center?"

    # Test unified embeddings
    start = time.time()
    try:
        result = embed_unified(
            test_text,
            return_dense=True,
            return_sparse=CONFIG.use_sparse,
            context="query"
        )
        duration = time.time() - start

        logger.info(f"‚úÖ Unified embeddings completed in {duration:.3f}s")
        if result.get('dense_vecs'):
            logger.info(f"   Dense vector shape: {len(result['dense_vecs'][0])}")
        if result.get('lexical_weights') and result['lexical_weights'][0]:
            sparse_tokens = len(result['lexical_weights'][0])
            logger.info(f"   Sparse tokens: {sparse_tokens}")
        else:
            logger.info("   Sparse: not available or empty")

    except Exception as e:
        logger.error(f"‚ùå Strategy test failed: {e}")

def simulate_different_systems():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("=== System Configuration Simulation ===")

    # Simulate different scenarios
    scenarios = [
        ("NVIDIA GPU (CUDA)", "Should choose: bge"),
        ("AMD GPU (DirectML)", "Should choose: hybrid"),
        ("CPU only", "Should choose: onnx"),
    ]

    for scenario, expected in scenarios:
        logger.info(f"{scenario}: {expected}")

if __name__ == "__main__":
    logger.info("Starting automatic strategy selection test")
    logger.info(f"Configuration:")
    logger.info(f"  EMBEDDINGS_BACKEND: {CONFIG.embeddings_backend}")
    logger.info(f"  EMBEDDING_DEVICE: {CONFIG.embedding_device}")
    logger.info(f"  USE_SPARSE: {CONFIG.use_sparse}")
    logger.info("")

    test_system_detection()
    print()

    strategy = test_strategy_selection()
    print()

    test_strategy_performance()
    print()

    simulate_different_systems()

    logger.info("Automatic strategy selection test completed")
    logger.info(f"üéØ Final recommendation: Use EMBEDDINGS_BACKEND={strategy} for your system")
