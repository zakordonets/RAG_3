#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö sparse –≤–µ–∫—Ç–æ—Ä–æ–≤
"""
import os
import sys
import numpy as np
from collections import defaultdict
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG
from app.services.bge_embeddings import embed_unified

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def test_sparse_fixed():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ sparse –≤–µ–∫—Ç–æ—Ä—ã"""

    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö sparse –≤–µ–∫—Ç–æ—Ä–æ–≤")
    logger.info("=" * 60)

    test_queries = [
        "–ö–∞–∫ –º–Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é?",
        "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏",
        "–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è",
        "routing configuration",
        "transfer thread"
    ]

    for i, query in enumerate(test_queries, 1):
        logger.info(f"\nüìù –¢–µ—Å—Ç {i}: '{query}'")
        logger.info("-" * 40)

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
            result = embed_unified(query)

            if isinstance(result, dict):
                dense_vecs = result.get("dense_vecs", [])
                sparse_vecs = result.get("sparse_vecs", [])
                lexical_weights = result.get("lexical_weights", [])

                logger.info(f"üìä Dense –≤–µ–∫—Ç–æ—Ä—ã: {len(dense_vecs)}")
                logger.info(f"üìä Sparse –≤–µ–∫—Ç–æ—Ä—ã: {len(sparse_vecs)}")
                logger.info(f"üìä Lexical weights: {len(lexical_weights)}")

                if dense_vecs:
                    logger.info(f"üìè Dense —Ä–∞–∑–º–µ—Ä: {len(dense_vecs[0]) if dense_vecs else 'N/A'}")

                if sparse_vecs:
                    logger.info(f"üìè Sparse —Ä–∞–∑–º–µ—Ä: {len(sparse_vecs[0]) if sparse_vecs else 'N/A'}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ sparse –∑–Ω–∞—á–µ–Ω–∏–π
                    if len(sparse_vecs[0]) > 0:
                        sparse_sample = sparse_vecs[0][:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–µ–Ω–∏–π
                        logger.info(f"üìã Sparse sample: {sparse_sample}")
                else:
                    logger.warning("‚ö†Ô∏è Sparse –≤–µ–∫—Ç–æ—Ä—ã –ø—É—Å—Ç—ã!")

                if lexical_weights:
                    logger.info(f"üìè Lexical weights —Ä–∞–∑–º–µ—Ä: {len(lexical_weights[0]) if lexical_weights else 'N/A'}")
                    if len(lexical_weights[0]) > 0:
                        weights = lexical_weights[0]
                        logger.info(f"üìã Lexical weights —Ç–∏–ø: {type(weights)}")

                        if isinstance(weights, defaultdict):
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ defaultdict
                            logger.info(f"üìã Lexical weights —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {dict(weights)}")

                            # –°—á–∏—Ç–∞–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            non_zero_count = len([v for v in weights.values() if v != 0])
                            logger.info(f"üìã –ù–µ–Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {non_zero_count}")

                            if non_zero_count > 0:
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π
                                sorted_items = sorted(weights.items(), key=lambda x: x[1], reverse=True)
                                logger.info(f"üìã –¢–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π: {sorted_items[:10]}")
                        else:
                            logger.info(f"üìã Lexical weights sample: {weights[:10] if hasattr(weights, '__getitem__') else weights}")
                else:
                    logger.warning("‚ö†Ô∏è Lexical weights –ø—É—Å—Ç—ã!")

            else:
                logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ embeddings: {type(e).__name__}: {e}")
            import traceback
            logger.error(traceback.format_exc())

if __name__ == "__main__":
    test_sparse_fixed()
