#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant
"""
import os
import sys
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from app.config import CONFIG
from qdrant_client import QdrantClient

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.remove()
logger.add(sys.stderr, level="INFO")

def check_qdrant_sparse():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç sparse –≤–µ–∫—Ç–æ—Ä—ã –≤ Qdrant"""

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ Qdrant")
    logger.info("=" * 60)

    client = QdrantClient(url=CONFIG.qdrant_url, api_key=CONFIG.qdrant_api_key or None)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_info = client.get_collection(CONFIG.qdrant_collection)
        logger.info(f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {CONFIG.qdrant_collection}")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {collection_info.points_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ–∫—Ç–æ—Ä–æ–≤
        if hasattr(collection_info, 'config') and hasattr(collection_info.config, 'params'):
            params = collection_info.config.params
            logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {params}")

            if hasattr(params, 'vectors'):
                vectors_config = params.vectors
                logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤: {vectors_config}")

                if hasattr(vectors_config, 'sparse_vectors'):
                    sparse_config = vectors_config.sparse_vectors
                    logger.info(f"üìä Sparse –≤–µ–∫—Ç–æ—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {sparse_config}")
                else:
                    logger.warning("‚ö†Ô∏è Sparse –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
                    return
            else:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info(f"\nüîç –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
        points = client.scroll(
            collection_name=CONFIG.qdrant_collection,
            limit=5,
            with_payload=True,
            with_vectors=True
        )[0]

        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(points)} —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")

        sparse_found = 0
        for i, point in enumerate(points):
            logger.info(f"\nüìã –¢–æ—á–∫–∞ {i+1}:")
            logger.info(f"  ID: {point.id}")

            if hasattr(point, 'vector') and point.vector:
                if isinstance(point.vector, dict):
                    vector_types = list(point.vector.keys())
                    logger.info(f"  –¢–∏–ø—ã –≤–µ–∫—Ç–æ—Ä–æ–≤: {vector_types}")

                    if 'sparse' in point.vector:
                        sparse_vec = point.vector['sparse']
                        logger.info(f"  ‚úÖ Sparse –≤–µ–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω!")
                        sparse_found += 1

                        if hasattr(sparse_vec, 'indices') and hasattr(sparse_vec, 'values'):
                            logger.info(f"    –†–∞–∑–º–µ—Ä: {len(sparse_vec.indices)} –∏–Ω–¥–µ–∫—Å–æ–≤, {len(sparse_vec.values)} –∑–Ω–∞—á–µ–Ω–∏–π")
                            if sparse_vec.indices:
                                logger.info(f"    –ò–Ω–¥–µ–∫—Å—ã: {sparse_vec.indices[:10]}...")
                                logger.info(f"    –ó–Ω–∞—á–µ–Ω–∏—è: {[f'{v:.3f}' for v in sparse_vec.values[:10]]}...")
                        else:
                            logger.info(f"    –§–æ—Ä–º–∞—Ç: {type(sparse_vec)} = {sparse_vec}")
                    else:
                        logger.warning("  ‚ö†Ô∏è Sparse –≤–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        logger.info(f"    –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã: {vector_types}")
                else:
                    logger.info(f"  –í–µ–∫—Ç–æ—Ä: {type(point.vector)}")
            else:
                logger.warning("  ‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

        logger.info(f"\nüìä –ò—Ç–æ–≥–æ: {sparse_found}/{len(points)} —Ç–æ—á–µ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç sparse –≤–µ–∫—Ç–æ—Ä—ã")

        if sparse_found == 0:
            logger.error("‚ùå Sparse –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ!")
            logger.info("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.info("  1. Sparse –≤–µ–∫—Ç–æ—Ä—ã –Ω–µ –∏–Ω–¥–µ–∫—Å–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            logger.info("  2. –ö–æ–ª–ª–µ–∫—Ü–∏—è –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ sparse –≤–µ–∫—Ç–æ—Ä–æ–≤")
            logger.info("  3. –ù—É–∂–Ω–æ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å sparse –≤–µ–∫—Ç–æ—Ä–∞–º–∏")
        else:
            logger.success(f"‚úÖ Sparse –≤–µ–∫—Ç–æ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –≤ {sparse_found} —Ç–æ—á–∫–∞—Ö")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Qdrant: {type(e).__name__}: {e}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    check_qdrant_sparse()
