"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞
"""
import sys
sys.path.insert(0, '.')

from app.services.search.retrieval import client, COLLECTION
from qdrant_client.models import Filter, FieldCondition, MatchValue

target_url = "https://docs-chatcenter.edna.ru/docs/start/whatis"

# –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ Qdrant
results = client.scroll(
    collection_name=COLLECTION,
    scroll_filter=Filter(
        must=[FieldCondition(key="canonical_url", match=MatchValue(value=target_url))]
    ),
    limit=100,
    with_payload=True,
    with_vectors=False
)

# –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
with open(r"C:\CC_RAG\docs\10-start\10-whatis.md", "r", encoding="utf-8") as f:
    original = f.read()

print("=" * 100)
print("–ê–ù–ê–õ–ò–ó: –û–†–ò–ì–ò–ù–ê–õ vs QDRANT")
print("=" * 100)

print("\nüìÑ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –§–ê–ô–õ:")
print(f"  –î–ª–∏–Ω–∞: {len(original)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"  –°—Ç—Ä–æ–∫: {len(original.splitlines())}")

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
h2_count = original.count('\n## ')
h3_count = original.count('\n### ')
table_count = original.count('|---|')
list_items = original.count('\n- ')
code_blocks = original.count('```')

print(f"\n  –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
print(f"    - –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2: {h2_count}")
print(f"    - –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤ H3: {h3_count}")
print(f"    - –¢–∞–±–ª–∏—Ü: {table_count}")
print(f"    - –°–ø–∏—Å–∫–æ–≤: {list_items}")
print(f"    - –ë–ª–æ–∫–æ–≤ –∫–æ–¥–∞: {code_blocks}")

print("\n" + "=" * 100)
print("üì¶ –ß–ê–ù–ö–ò –í QDRANT:")
print("=" * 100)

if results[0]:
    chunks = results[0]
    print(f"\n  –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

    for i, point in enumerate(chunks, 1):
        payload = point.payload
        text = payload.get('text', '')

        print(f"\n  –ß–∞–Ω–∫ #{i}:")
        print(f"    - ID: {point.id}")
        print(f"    - chunk_index: {payload.get('chunk_index', 'N/A')}")
        print(f"    - –î–ª–∏–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"    - Title: {payload.get('title', 'N/A')}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–ø–∞–ª–æ –≤ —á–∞–Ω–∫
        chunk_h2 = text.count('\n## ') + text.count('## ')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ
        chunk_h3 = text.count('\n### ')
        chunk_tables = text.count('|---|')
        chunk_lists = text.count('\n- ')

        print(f"    - –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤ H2: {chunk_h2}")
        print(f"    - –¢–∞–±–ª–∏—Ü: {chunk_tables}")
        print(f"    - –≠–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞: {chunk_lists}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
        sections_in_chunk = []
        if "–†–æ–ª–∏ –≤ edna Chat Center" in text:
            sections_in_chunk.append("–†–æ–ª–∏")
        if "–ö–∞–Ω–∞–ª—ã –≤ edna Chat Center" in text:
            sections_in_chunk.append("–ö–∞–Ω–∞–ª—ã")
        if "–ö edna Chat Center –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å" in text:
            sections_in_chunk.append("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")

        print(f"    - –°–µ–∫—Ü–∏–∏: {', '.join(sections_in_chunk) if sections_in_chunk else '–ù–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π'}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü
        print(f"\n    –ù–∞—á–∞–ª–æ (100 —Å–∏–º–≤): {text[:100]}...")
        print(f"    –ö–æ–Ω–µ—Ü (100 —Å–∏–º–≤): ...{text[-100:]}")

print("\n" + "=" * 100)
print("üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:")
print("=" * 100)

# –°—á–∏—Ç–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
total_qdrant_chars = sum(len(p.payload.get('text', '')) for p in chunks)
coverage = (total_qdrant_chars / len(original)) * 100

print(f"\n1. –ü–û–ö–†–´–¢–ò–ï –ö–û–ù–¢–ï–ù–¢–ê:")
print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {len(original)} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"   –í Qdrant: {total_qdrant_chars} —Å–∏–º–≤–æ–ª–æ–≤")
print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ: {coverage:.1f}%")

if len(chunks) == 1:
    print(f"\n2. ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –û–î–ù–û–ú —á–∞–Ω–∫–µ!")
    print(f"   - –°–º–µ—à–∞–Ω—ã —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã (—Ä–æ–ª–∏ + –∫–∞–Ω–∞–ª—ã)")
    print(f"   - –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ—à–∞–Ω–∞ —Å —Ç–µ–∫—Å—Ç–æ–º")
    print(f"   - –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–º–∞–º")

print("\n3. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ì–ï–†–ï–ù–¢–ù–û–°–¢–¨:")
chunk_text = chunks[0].payload.get('text', '') if chunks else ''
# –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ" –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
roles_pos = chunk_text.find("–†–æ–ª–∏ –≤ edna Chat Center")
channels_pos = chunk_text.find("–ö edna Chat Center –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å")

if roles_pos != -1 and channels_pos != -1:
    distance = channels_pos - roles_pos
    print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏ '–†–æ–ª–∏' –∏ '–ö–∞–Ω–∞–ª—ã': {distance} —Å–∏–º–≤–æ–ª–æ–≤")
    if distance > 500:
        print(f"   ‚ö†Ô∏è  –¢–µ–º—ã –¥–∞–ª–µ–∫–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ - –Ω–∏–∑–∫–∞—è –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å")

print("\n4. –°–¢–†–£–ö–¢–£–†–ù–ê–Ø –†–ê–ó–ë–ò–í–ö–ê:")
if chunk_h2 > 1:
    print(f"   ‚ùå –í –æ–¥–Ω–æ–º —á–∞–Ω–∫–µ {chunk_h2} –∑–∞–≥–æ–ª–æ–≤–∫–∞ H2 - —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã!")
if chunk_tables > 0:
    print(f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ –≤–Ω—É—Ç—Ä–∏ —á–∞–Ω–∫–∞ –º–æ–∂–µ—Ç –∏—Å–∫–∞–∂–∞—Ç—å —Å–µ–º–∞–Ω—Ç–∏–∫—É")

print("\n" + "=" * 100)
